// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KerasProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Keras {

  /// <summary>Holder for reflection information generated from KerasProto.proto</summary>
  public static partial class KerasProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for KerasProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KerasProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBLZXJhc1Byb3RvLnByb3RvEgVrZXJhcyKZAwoKS2VyYXNQcm90bxINCgVn",
            "cmFwaBgBIAEoCRINCgVtb2RlbBgCIAEoDBISCgptb2RlbF9wYXRoGAMgASgJ",
            "EhIKCm1vZGVsX3V1aWQYBCABKAkSFgoOY29tcGlsZV9wYXJhbXMYBSABKAkS",
            "EgoKZml0X3BhcmFtcxgGIAEoCRIWCg5wcmVkaWN0X3BhcmFtcxgHIAEoCRIM",
            "CgRwYXRoGAggASgJEhAKCG5zYW1wbGVzGAkgASgNEhEKCW5mZWF0dXJlcxgK",
            "IAEoDRIPCgdubGFiZWxzGAsgASgNEhIKCmJhdGNoX3NpemUYDCABKA0SDgoG",
            "ZXBvY2hzGA0gASgNEg8KB3ZlcmJvc2UYDiABKA0SIgoGaW5wdXRzGA8gAygL",
            "MhIua2VyYXMuVGVuc29yUHJvdG8SIwoHb3V0cHV0cxgQIAMoCzISLmtlcmFz",
            "LlRlbnNvclByb3RvEhkKEXByb2dyZXNzX2NhbGxiYWNrGBEgASgEEiQKB2Nv",
            "bW1hbmQYEiABKA4yEy5rZXJhcy5LZXJhc0NvbW1hbmQijgEKC1RlbnNvclBy",
            "b3RvEh0KBHR5cGUYASABKA4yDy5rZXJhcy5EYXRhVHlwZRIjCgZmb3JtYXQY",
            "AiABKA4yEy5rZXJhcy5UZW5zb3JGb3JtYXQSDQoFY291bnQYAyABKAUSDQoF",
            "c2hhcGUYBCADKAUSDwoHaW5kaWNlcxgFIAMoBRIMCgRkYXRhGAYgASgMIkUK",
            "GFN0cmVhbUNvbmZpZ3VyYXRpb25Qcm90bxIMCgRuYW1lGAEgASgJEgsKA2Rp",
            "bRgCIAEoAxIOCgZzcGFyc2UYAyABKAgiVQoTVGV4dERhdGFTb3VyY2VQcm90",
            "bxIMCgRwYXRoGAEgASgJEjAKB3N0cmVhbXMYAiADKAsyHy5rZXJhcy5TdHJl",
            "YW1Db25maWd1cmF0aW9uUHJvdG8idQoMSGlzdG9yeVByb3RvEigKBHR5cGUY",
            "ASABKA4yGi5rZXJhcy5IaXN0b3J5Q2FsbGJhY2tUeXBlEgoKAmlkGAIgASgN",
            "Eg0KBW5hbWVzGAMgAygJEg4KBnZhbHVlcxgEIAMoARIQCghuc2FtcGxlcxgF",
            "IAEoBCokCgxLZXJhc0NvbW1hbmQSBwoDRml0EAASCwoHUHJlZGljdBABKi0K",
            "DFRlbnNvckZvcm1hdBIMCghSb3dNYWpvchAAEg8KC0NvbHVtbk1ham9yEAEq",
            "oAEKCERhdGFUeXBlEgkKBUZsb2F0EAASCgoGRG91YmxlEAESCQoFSW50MzIQ",
            "AhIJCgVJbnQ2NBADEgoKBlVJbnQzMhAEEgoKBlVJbnQ2NBAFEgoKBlN0cmlu",
            "ZxAGEggKBEludDgQBxIJCgVJbnQxNhAIEgkKBVVJbnQ4EAkSCgoGVUludDE2",
            "EAoSCAoEQm9vbBALEg0KCVVuZGVmaW5lZBAMKnUKE0hpc3RvcnlDYWxsYmFj",
            "a1R5cGUSEQoNVHJhaW5pbmdCZWdpbhAAEg8KC1RyYWluaW5nRW5kEAESDgoK",
            "QmF0Y2hCZWdpbhACEgwKCEJhdGNoRW5kEAMSDgoKRXBvY2hCZWdpbhAEEgwK",
            "CEVwb2NoRW5kEAVCCKoCBUtlcmFzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Keras.KerasCommand), typeof(global::Keras.TensorFormat), typeof(global::Keras.DataType), typeof(global::Keras.HistoryCallbackType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Keras.KerasProto), global::Keras.KerasProto.Parser, new[]{ "Graph", "Model", "ModelPath", "ModelUuid", "CompileParams", "FitParams", "PredictParams", "Path", "Nsamples", "Nfeatures", "Nlabels", "BatchSize", "Epochs", "Verbose", "Inputs", "Outputs", "ProgressCallback", "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keras.TensorProto), global::Keras.TensorProto.Parser, new[]{ "Type", "Format", "Count", "Shape", "Indices", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keras.StreamConfigurationProto), global::Keras.StreamConfigurationProto.Parser, new[]{ "Name", "Dim", "Sparse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keras.TextDataSourceProto), global::Keras.TextDataSourceProto.Parser, new[]{ "Path", "Streams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Keras.HistoryProto), global::Keras.HistoryProto.Parser, new[]{ "Type", "Id", "Names", "Values", "Nsamples" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum KerasCommand {
    [pbr::OriginalName("Fit")] Fit = 0,
    [pbr::OriginalName("Predict")] Predict = 1,
  }

  public enum TensorFormat {
    [pbr::OriginalName("RowMajor")] RowMajor = 0,
    [pbr::OriginalName("ColumnMajor")] ColumnMajor = 1,
  }

  public enum DataType {
    [pbr::OriginalName("Float")] Float = 0,
    [pbr::OriginalName("Double")] Double = 1,
    [pbr::OriginalName("Int32")] Int32 = 2,
    [pbr::OriginalName("Int64")] Int64 = 3,
    [pbr::OriginalName("UInt32")] Uint32 = 4,
    [pbr::OriginalName("UInt64")] Uint64 = 5,
    [pbr::OriginalName("String")] String = 6,
    [pbr::OriginalName("Int8")] Int8 = 7,
    [pbr::OriginalName("Int16")] Int16 = 8,
    [pbr::OriginalName("UInt8")] Uint8 = 9,
    [pbr::OriginalName("UInt16")] Uint16 = 10,
    [pbr::OriginalName("Bool")] Bool = 11,
    [pbr::OriginalName("Undefined")] Undefined = 12,
  }

  public enum HistoryCallbackType {
    [pbr::OriginalName("TrainingBegin")] TrainingBegin = 0,
    [pbr::OriginalName("TrainingEnd")] TrainingEnd = 1,
    [pbr::OriginalName("BatchBegin")] BatchBegin = 2,
    [pbr::OriginalName("BatchEnd")] BatchEnd = 3,
    [pbr::OriginalName("EpochBegin")] EpochBegin = 4,
    [pbr::OriginalName("EpochEnd")] EpochEnd = 5,
  }

  #endregion

  #region Messages
  public sealed partial class KerasProto : pb::IMessage<KerasProto> {
    private static readonly pb::MessageParser<KerasProto> _parser = new pb::MessageParser<KerasProto>(() => new KerasProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KerasProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keras.KerasProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KerasProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KerasProto(KerasProto other) : this() {
      graph_ = other.graph_;
      model_ = other.model_;
      modelPath_ = other.modelPath_;
      modelUuid_ = other.modelUuid_;
      compileParams_ = other.compileParams_;
      fitParams_ = other.fitParams_;
      predictParams_ = other.predictParams_;
      path_ = other.path_;
      nsamples_ = other.nsamples_;
      nfeatures_ = other.nfeatures_;
      nlabels_ = other.nlabels_;
      batchSize_ = other.batchSize_;
      epochs_ = other.epochs_;
      verbose_ = other.verbose_;
      inputs_ = other.inputs_.Clone();
      outputs_ = other.outputs_.Clone();
      progressCallback_ = other.progressCallback_;
      command_ = other.command_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KerasProto Clone() {
      return new KerasProto(this);
    }

    /// <summary>Field number for the "graph" field.</summary>
    public const int GraphFieldNumber = 1;
    private string graph_ = "";
    /// <summary>
    /// The symbolic graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Graph {
      get { return graph_; }
      set {
        graph_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 2;
    private pb::ByteString model_ = pb::ByteString.Empty;
    /// <summary>
    /// The binary model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_path" field.</summary>
    public const int ModelPathFieldNumber = 3;
    private string modelPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelPath {
      get { return modelPath_; }
      set {
        modelPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_uuid" field.</summary>
    public const int ModelUuidFieldNumber = 4;
    private string modelUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelUuid {
      get { return modelUuid_; }
      set {
        modelUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "compile_params" field.</summary>
    public const int CompileParamsFieldNumber = 5;
    private string compileParams_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompileParams {
      get { return compileParams_; }
      set {
        compileParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fit_params" field.</summary>
    public const int FitParamsFieldNumber = 6;
    private string fitParams_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FitParams {
      get { return fitParams_; }
      set {
        fitParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "predict_params" field.</summary>
    public const int PredictParamsFieldNumber = 7;
    private string predictParams_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PredictParams {
      get { return predictParams_; }
      set {
        predictParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 8;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nsamples" field.</summary>
    public const int NsamplesFieldNumber = 9;
    private uint nsamples_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nsamples {
      get { return nsamples_; }
      set {
        nsamples_ = value;
      }
    }

    /// <summary>Field number for the "nfeatures" field.</summary>
    public const int NfeaturesFieldNumber = 10;
    private uint nfeatures_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nfeatures {
      get { return nfeatures_; }
      set {
        nfeatures_ = value;
      }
    }

    /// <summary>Field number for the "nlabels" field.</summary>
    public const int NlabelsFieldNumber = 11;
    private uint nlabels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nlabels {
      get { return nlabels_; }
      set {
        nlabels_ = value;
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 12;
    private uint batchSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "epochs" field.</summary>
    public const int EpochsFieldNumber = 13;
    private uint epochs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Epochs {
      get { return epochs_; }
      set {
        epochs_ = value;
      }
    }

    /// <summary>Field number for the "verbose" field.</summary>
    public const int VerboseFieldNumber = 14;
    private uint verbose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Verbose {
      get { return verbose_; }
      set {
        verbose_ = value;
      }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Keras.TensorProto> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(122, global::Keras.TensorProto.Parser);
    private readonly pbc::RepeatedField<global::Keras.TensorProto> inputs_ = new pbc::RepeatedField<global::Keras.TensorProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Keras.TensorProto> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "outputs" field.</summary>
    public const int OutputsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Keras.TensorProto> _repeated_outputs_codec
        = pb::FieldCodec.ForMessage(130, global::Keras.TensorProto.Parser);
    private readonly pbc::RepeatedField<global::Keras.TensorProto> outputs_ = new pbc::RepeatedField<global::Keras.TensorProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Keras.TensorProto> Outputs {
      get { return outputs_; }
    }

    /// <summary>Field number for the "progress_callback" field.</summary>
    public const int ProgressCallbackFieldNumber = 17;
    private ulong progressCallback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ProgressCallback {
      get { return progressCallback_; }
      set {
        progressCallback_ = value;
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 18;
    private global::Keras.KerasCommand command_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Keras.KerasCommand Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KerasProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KerasProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Graph != other.Graph) return false;
      if (Model != other.Model) return false;
      if (ModelPath != other.ModelPath) return false;
      if (ModelUuid != other.ModelUuid) return false;
      if (CompileParams != other.CompileParams) return false;
      if (FitParams != other.FitParams) return false;
      if (PredictParams != other.PredictParams) return false;
      if (Path != other.Path) return false;
      if (Nsamples != other.Nsamples) return false;
      if (Nfeatures != other.Nfeatures) return false;
      if (Nlabels != other.Nlabels) return false;
      if (BatchSize != other.BatchSize) return false;
      if (Epochs != other.Epochs) return false;
      if (Verbose != other.Verbose) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      if(!outputs_.Equals(other.outputs_)) return false;
      if (ProgressCallback != other.ProgressCallback) return false;
      if (Command != other.Command) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Graph.Length != 0) hash ^= Graph.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (ModelPath.Length != 0) hash ^= ModelPath.GetHashCode();
      if (ModelUuid.Length != 0) hash ^= ModelUuid.GetHashCode();
      if (CompileParams.Length != 0) hash ^= CompileParams.GetHashCode();
      if (FitParams.Length != 0) hash ^= FitParams.GetHashCode();
      if (PredictParams.Length != 0) hash ^= PredictParams.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Nsamples != 0) hash ^= Nsamples.GetHashCode();
      if (Nfeatures != 0) hash ^= Nfeatures.GetHashCode();
      if (Nlabels != 0) hash ^= Nlabels.GetHashCode();
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      if (Epochs != 0) hash ^= Epochs.GetHashCode();
      if (Verbose != 0) hash ^= Verbose.GetHashCode();
      hash ^= inputs_.GetHashCode();
      hash ^= outputs_.GetHashCode();
      if (ProgressCallback != 0UL) hash ^= ProgressCallback.GetHashCode();
      if (Command != 0) hash ^= Command.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Graph.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Graph);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Model);
      }
      if (ModelPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModelPath);
      }
      if (ModelUuid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ModelUuid);
      }
      if (CompileParams.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CompileParams);
      }
      if (FitParams.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FitParams);
      }
      if (PredictParams.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PredictParams);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Path);
      }
      if (Nsamples != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Nsamples);
      }
      if (Nfeatures != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Nfeatures);
      }
      if (Nlabels != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Nlabels);
      }
      if (BatchSize != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(BatchSize);
      }
      if (Epochs != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Epochs);
      }
      if (Verbose != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Verbose);
      }
      inputs_.WriteTo(output, _repeated_inputs_codec);
      outputs_.WriteTo(output, _repeated_outputs_codec);
      if (ProgressCallback != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(ProgressCallback);
      }
      if (Command != 0) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) Command);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Graph.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Graph);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Model);
      }
      if (ModelPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelPath);
      }
      if (ModelUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelUuid);
      }
      if (CompileParams.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompileParams);
      }
      if (FitParams.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FitParams);
      }
      if (PredictParams.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PredictParams);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Nsamples != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nsamples);
      }
      if (Nfeatures != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nfeatures);
      }
      if (Nlabels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nlabels);
      }
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatchSize);
      }
      if (Epochs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Epochs);
      }
      if (Verbose != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Verbose);
      }
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      size += outputs_.CalculateSize(_repeated_outputs_codec);
      if (ProgressCallback != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ProgressCallback);
      }
      if (Command != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KerasProto other) {
      if (other == null) {
        return;
      }
      if (other.Graph.Length != 0) {
        Graph = other.Graph;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.ModelPath.Length != 0) {
        ModelPath = other.ModelPath;
      }
      if (other.ModelUuid.Length != 0) {
        ModelUuid = other.ModelUuid;
      }
      if (other.CompileParams.Length != 0) {
        CompileParams = other.CompileParams;
      }
      if (other.FitParams.Length != 0) {
        FitParams = other.FitParams;
      }
      if (other.PredictParams.Length != 0) {
        PredictParams = other.PredictParams;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Nsamples != 0) {
        Nsamples = other.Nsamples;
      }
      if (other.Nfeatures != 0) {
        Nfeatures = other.Nfeatures;
      }
      if (other.Nlabels != 0) {
        Nlabels = other.Nlabels;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      if (other.Epochs != 0) {
        Epochs = other.Epochs;
      }
      if (other.Verbose != 0) {
        Verbose = other.Verbose;
      }
      inputs_.Add(other.inputs_);
      outputs_.Add(other.outputs_);
      if (other.ProgressCallback != 0UL) {
        ProgressCallback = other.ProgressCallback;
      }
      if (other.Command != 0) {
        Command = other.Command;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Graph = input.ReadString();
            break;
          }
          case 18: {
            Model = input.ReadBytes();
            break;
          }
          case 26: {
            ModelPath = input.ReadString();
            break;
          }
          case 34: {
            ModelUuid = input.ReadString();
            break;
          }
          case 42: {
            CompileParams = input.ReadString();
            break;
          }
          case 50: {
            FitParams = input.ReadString();
            break;
          }
          case 58: {
            PredictParams = input.ReadString();
            break;
          }
          case 66: {
            Path = input.ReadString();
            break;
          }
          case 72: {
            Nsamples = input.ReadUInt32();
            break;
          }
          case 80: {
            Nfeatures = input.ReadUInt32();
            break;
          }
          case 88: {
            Nlabels = input.ReadUInt32();
            break;
          }
          case 96: {
            BatchSize = input.ReadUInt32();
            break;
          }
          case 104: {
            Epochs = input.ReadUInt32();
            break;
          }
          case 112: {
            Verbose = input.ReadUInt32();
            break;
          }
          case 122: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 130: {
            outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
            break;
          }
          case 136: {
            ProgressCallback = input.ReadUInt64();
            break;
          }
          case 144: {
            command_ = (global::Keras.KerasCommand) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TensorProto : pb::IMessage<TensorProto> {
    private static readonly pb::MessageParser<TensorProto> _parser = new pb::MessageParser<TensorProto>(() => new TensorProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TensorProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keras.KerasProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TensorProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TensorProto(TensorProto other) : this() {
      type_ = other.type_;
      format_ = other.format_;
      count_ = other.count_;
      shape_ = other.shape_.Clone();
      indices_ = other.indices_.Clone();
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TensorProto Clone() {
      return new TensorProto(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Keras.DataType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Keras.DataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 2;
    private global::Keras.TensorFormat format_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Keras.TensorFormat Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_shape_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> shape_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Shape {
      get { return shape_; }
    }

    /// <summary>Field number for the "indices" field.</summary>
    public const int IndicesFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_indices_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> indices_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Indices {
      get { return indices_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 6;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TensorProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TensorProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Format != other.Format) return false;
      if (Count != other.Count) return false;
      if(!shape_.Equals(other.shape_)) return false;
      if(!indices_.Equals(other.indices_)) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Format != 0) hash ^= Format.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= shape_.GetHashCode();
      hash ^= indices_.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Format != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Format);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      shape_.WriteTo(output, _repeated_shape_codec);
      indices_.WriteTo(output, _repeated_indices_codec);
      if (Data.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Format != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      size += shape_.CalculateSize(_repeated_shape_codec);
      size += indices_.CalculateSize(_repeated_indices_codec);
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TensorProto other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Format != 0) {
        Format = other.Format;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      shape_.Add(other.shape_);
      indices_.Add(other.indices_);
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Keras.DataType) input.ReadEnum();
            break;
          }
          case 16: {
            format_ = (global::Keras.TensorFormat) input.ReadEnum();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            shape_.AddEntriesFrom(input, _repeated_shape_codec);
            break;
          }
          case 42:
          case 40: {
            indices_.AddEntriesFrom(input, _repeated_indices_codec);
            break;
          }
          case 50: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamConfigurationProto : pb::IMessage<StreamConfigurationProto> {
    private static readonly pb::MessageParser<StreamConfigurationProto> _parser = new pb::MessageParser<StreamConfigurationProto>(() => new StreamConfigurationProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamConfigurationProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keras.KerasProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamConfigurationProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamConfigurationProto(StreamConfigurationProto other) : this() {
      name_ = other.name_;
      dim_ = other.dim_;
      sparse_ = other.sparse_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamConfigurationProto Clone() {
      return new StreamConfigurationProto(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dim" field.</summary>
    public const int DimFieldNumber = 2;
    private long dim_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Dim {
      get { return dim_; }
      set {
        dim_ = value;
      }
    }

    /// <summary>Field number for the "sparse" field.</summary>
    public const int SparseFieldNumber = 3;
    private bool sparse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sparse {
      get { return sparse_; }
      set {
        sparse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamConfigurationProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamConfigurationProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Dim != other.Dim) return false;
      if (Sparse != other.Sparse) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Dim != 0L) hash ^= Dim.GetHashCode();
      if (Sparse != false) hash ^= Sparse.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Dim != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Dim);
      }
      if (Sparse != false) {
        output.WriteRawTag(24);
        output.WriteBool(Sparse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Dim != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Dim);
      }
      if (Sparse != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamConfigurationProto other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Dim != 0L) {
        Dim = other.Dim;
      }
      if (other.Sparse != false) {
        Sparse = other.Sparse;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Dim = input.ReadInt64();
            break;
          }
          case 24: {
            Sparse = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextDataSourceProto : pb::IMessage<TextDataSourceProto> {
    private static readonly pb::MessageParser<TextDataSourceProto> _parser = new pb::MessageParser<TextDataSourceProto>(() => new TextDataSourceProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextDataSourceProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keras.KerasProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextDataSourceProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextDataSourceProto(TextDataSourceProto other) : this() {
      path_ = other.path_;
      streams_ = other.streams_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextDataSourceProto Clone() {
      return new TextDataSourceProto(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "streams" field.</summary>
    public const int StreamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Keras.StreamConfigurationProto> _repeated_streams_codec
        = pb::FieldCodec.ForMessage(18, global::Keras.StreamConfigurationProto.Parser);
    private readonly pbc::RepeatedField<global::Keras.StreamConfigurationProto> streams_ = new pbc::RepeatedField<global::Keras.StreamConfigurationProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Keras.StreamConfigurationProto> Streams {
      get { return streams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextDataSourceProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextDataSourceProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if(!streams_.Equals(other.streams_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      hash ^= streams_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      streams_.WriteTo(output, _repeated_streams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      size += streams_.CalculateSize(_repeated_streams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextDataSourceProto other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      streams_.Add(other.streams_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 18: {
            streams_.AddEntriesFrom(input, _repeated_streams_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HistoryProto : pb::IMessage<HistoryProto> {
    private static readonly pb::MessageParser<HistoryProto> _parser = new pb::MessageParser<HistoryProto>(() => new HistoryProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoryProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Keras.KerasProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryProto(HistoryProto other) : this() {
      type_ = other.type_;
      id_ = other.id_;
      names_ = other.names_.Clone();
      values_ = other.values_.Clone();
      nsamples_ = other.nsamples_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoryProto Clone() {
      return new HistoryProto(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Keras.HistoryCallbackType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Keras.HistoryCallbackType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "names" field.</summary>
    public const int NamesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_names_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> names_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Names {
      get { return names_; }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 4;
    private static readonly pb::FieldCodec<double> _repeated_values_codec
        = pb::FieldCodec.ForDouble(34);
    private readonly pbc::RepeatedField<double> values_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "nsamples" field.</summary>
    public const int NsamplesFieldNumber = 5;
    private ulong nsamples_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Nsamples {
      get { return nsamples_; }
      set {
        nsamples_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoryProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoryProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      if(!names_.Equals(other.names_)) return false;
      if(!values_.Equals(other.values_)) return false;
      if (Nsamples != other.Nsamples) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= names_.GetHashCode();
      hash ^= values_.GetHashCode();
      if (Nsamples != 0UL) hash ^= Nsamples.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      names_.WriteTo(output, _repeated_names_codec);
      values_.WriteTo(output, _repeated_values_codec);
      if (Nsamples != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Nsamples);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      size += names_.CalculateSize(_repeated_names_codec);
      size += values_.CalculateSize(_repeated_values_codec);
      if (Nsamples != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Nsamples);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoryProto other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      names_.Add(other.names_);
      values_.Add(other.values_);
      if (other.Nsamples != 0UL) {
        Nsamples = other.Nsamples;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Keras.HistoryCallbackType) input.ReadEnum();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 26: {
            names_.AddEntriesFrom(input, _repeated_names_codec);
            break;
          }
          case 34:
          case 33: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 40: {
            Nsamples = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
