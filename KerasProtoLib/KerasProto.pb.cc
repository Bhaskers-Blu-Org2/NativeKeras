// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KerasProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KerasProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace keras {
class KerasProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KerasProto> {
} _KerasProto_default_instance_;
class TensorProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorProto> {
} _TensorProto_default_instance_;
class StreamConfigurationProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamConfigurationProto> {
} _StreamConfigurationProto_default_instance_;
class TextDataSourceProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TextDataSourceProto> {
} _TextDataSourceProto_default_instance_;
class HistoryProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HistoryProto> {
} _HistoryProto_default_instance_;

namespace protobuf_KerasProto_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, graph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, model_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, model_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, compile_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, fit_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, predict_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, nsamples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, nfeatures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, nlabels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, epochs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, verbose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, outputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, progress_callback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KerasProto, command_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, indices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamConfigurationProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamConfigurationProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamConfigurationProto, dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamConfigurationProto, sparse_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextDataSourceProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextDataSourceProto, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextDataSourceProto, streams_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryProto, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryProto, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryProto, names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryProto, values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryProto, nsamples_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(KerasProto)},
  { 23, -1, sizeof(TensorProto)},
  { 34, -1, sizeof(StreamConfigurationProto)},
  { 42, -1, sizeof(TextDataSourceProto)},
  { 49, -1, sizeof(HistoryProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_KerasProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamConfigurationProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TextDataSourceProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HistoryProto_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "KerasProto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _KerasProto_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TensorProto_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _StreamConfigurationProto_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _TextDataSourceProto_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _HistoryProto_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _KerasProto_default_instance_.DefaultConstruct();
  _TensorProto_default_instance_.DefaultConstruct();
  _StreamConfigurationProto_default_instance_.DefaultConstruct();
  _TextDataSourceProto_default_instance_.DefaultConstruct();
  _HistoryProto_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020KerasProto.proto\022\005keras\"\231\003\n\nKerasProto"
      "\022\r\n\005graph\030\001 \001(\t\022\r\n\005model\030\002 \001(\014\022\022\n\nmodel_"
      "path\030\003 \001(\t\022\022\n\nmodel_uuid\030\004 \001(\t\022\026\n\016compil"
      "e_params\030\005 \001(\t\022\022\n\nfit_params\030\006 \001(\t\022\026\n\016pr"
      "edict_params\030\007 \001(\t\022\014\n\004path\030\010 \001(\t\022\020\n\010nsam"
      "ples\030\t \001(\r\022\021\n\tnfeatures\030\n \001(\r\022\017\n\007nlabels"
      "\030\013 \001(\r\022\022\n\nbatch_size\030\014 \001(\r\022\016\n\006epochs\030\r \001"
      "(\r\022\017\n\007verbose\030\016 \001(\r\022\"\n\006inputs\030\017 \003(\0132\022.ke"
      "ras.TensorProto\022#\n\007outputs\030\020 \003(\0132\022.keras"
      ".TensorProto\022\031\n\021progress_callback\030\021 \001(\004\022"
      "$\n\007command\030\022 \001(\0162\023.keras.KerasCommand\"\216\001"
      "\n\013TensorProto\022\035\n\004type\030\001 \001(\0162\017.keras.Data"
      "Type\022#\n\006format\030\002 \001(\0162\023.keras.TensorForma"
      "t\022\r\n\005count\030\003 \001(\005\022\r\n\005shape\030\004 \003(\005\022\017\n\007indic"
      "es\030\005 \003(\005\022\014\n\004data\030\006 \001(\014\"E\n\030StreamConfigur"
      "ationProto\022\014\n\004name\030\001 \001(\t\022\013\n\003dim\030\002 \001(\003\022\016\n"
      "\006sparse\030\003 \001(\010\"U\n\023TextDataSourceProto\022\014\n\004"
      "path\030\001 \001(\t\0220\n\007streams\030\002 \003(\0132\037.keras.Stre"
      "amConfigurationProto\"u\n\014HistoryProto\022(\n\004"
      "type\030\001 \001(\0162\032.keras.HistoryCallbackType\022\n"
      "\n\002id\030\002 \001(\r\022\r\n\005names\030\003 \003(\t\022\016\n\006values\030\004 \003("
      "\001\022\020\n\010nsamples\030\005 \001(\004*$\n\014KerasCommand\022\007\n\003F"
      "it\020\000\022\013\n\007Predict\020\001*-\n\014TensorFormat\022\014\n\010Row"
      "Major\020\000\022\017\n\013ColumnMajor\020\001*\240\001\n\010DataType\022\t\n"
      "\005Float\020\000\022\n\n\006Double\020\001\022\t\n\005Int32\020\002\022\t\n\005Int64"
      "\020\003\022\n\n\006UInt32\020\004\022\n\n\006UInt64\020\005\022\n\n\006String\020\006\022\010"
      "\n\004Int8\020\007\022\t\n\005Int16\020\010\022\t\n\005UInt8\020\t\022\n\n\006UInt16"
      "\020\n\022\010\n\004Bool\020\013\022\r\n\tUndefined\020\014*u\n\023HistoryCa"
      "llbackType\022\021\n\rTrainingBegin\020\000\022\017\n\013Trainin"
      "gEnd\020\001\022\016\n\nBatchBegin\020\002\022\014\n\010BatchEnd\020\003\022\016\n\n"
      "EpochBegin\020\004\022\014\n\010EpochEnd\020\005B\010\252\002\005Kerasb\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KerasProto.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_KerasProto_2eproto

const ::google::protobuf::EnumDescriptor* KerasCommand_descriptor() {
  protobuf_KerasProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KerasProto_2eproto::file_level_enum_descriptors[0];
}
bool KerasCommand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TensorFormat_descriptor() {
  protobuf_KerasProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KerasProto_2eproto::file_level_enum_descriptors[1];
}
bool TensorFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_KerasProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KerasProto_2eproto::file_level_enum_descriptors[2];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HistoryCallbackType_descriptor() {
  protobuf_KerasProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KerasProto_2eproto::file_level_enum_descriptors[3];
}
bool HistoryCallbackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KerasProto::kGraphFieldNumber;
const int KerasProto::kModelFieldNumber;
const int KerasProto::kModelPathFieldNumber;
const int KerasProto::kModelUuidFieldNumber;
const int KerasProto::kCompileParamsFieldNumber;
const int KerasProto::kFitParamsFieldNumber;
const int KerasProto::kPredictParamsFieldNumber;
const int KerasProto::kPathFieldNumber;
const int KerasProto::kNsamplesFieldNumber;
const int KerasProto::kNfeaturesFieldNumber;
const int KerasProto::kNlabelsFieldNumber;
const int KerasProto::kBatchSizeFieldNumber;
const int KerasProto::kEpochsFieldNumber;
const int KerasProto::kVerboseFieldNumber;
const int KerasProto::kInputsFieldNumber;
const int KerasProto::kOutputsFieldNumber;
const int KerasProto::kProgressCallbackFieldNumber;
const int KerasProto::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KerasProto::KerasProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_KerasProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:keras.KerasProto)
}
KerasProto::KerasProto(const KerasProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      inputs_(from.inputs_),
      outputs_(from.outputs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  graph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.graph().size() > 0) {
    graph_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.graph_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  model_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_path().size() > 0) {
    model_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_path_);
  }
  model_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_uuid().size() > 0) {
    model_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_uuid_);
  }
  compile_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.compile_params().size() > 0) {
    compile_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compile_params_);
  }
  fit_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fit_params().size() > 0) {
    fit_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fit_params_);
  }
  predict_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.predict_params().size() > 0) {
    predict_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.predict_params_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&nsamples_, &from.nsamples_,
    reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&nsamples_) + sizeof(command_));
  // @@protoc_insertion_point(copy_constructor:keras.KerasProto)
}

void KerasProto::SharedCtor() {
  graph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compile_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fit_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  predict_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nsamples_, 0, reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&nsamples_) + sizeof(command_));
  _cached_size_ = 0;
}

KerasProto::~KerasProto() {
  // @@protoc_insertion_point(destructor:keras.KerasProto)
  SharedDtor();
}

void KerasProto::SharedDtor() {
  graph_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compile_params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fit_params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  predict_params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KerasProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KerasProto::descriptor() {
  protobuf_KerasProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KerasProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KerasProto& KerasProto::default_instance() {
  protobuf_KerasProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

KerasProto* KerasProto::New(::google::protobuf::Arena* arena) const {
  KerasProto* n = new KerasProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KerasProto::Clear() {
// @@protoc_insertion_point(message_clear_start:keras.KerasProto)
  inputs_.Clear();
  outputs_.Clear();
  graph_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compile_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fit_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  predict_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nsamples_, 0, reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&nsamples_) + sizeof(command_));
}

bool KerasProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:keras.KerasProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string graph = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph().data(), this->graph().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "keras.KerasProto.graph"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes model = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_path().data(), this->model_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "keras.KerasProto.model_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_uuid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_uuid().data(), this->model_uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "keras.KerasProto.model_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string compile_params = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compile_params()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->compile_params().data(), this->compile_params().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "keras.KerasProto.compile_params"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fit_params = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fit_params()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fit_params().data(), this->fit_params().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "keras.KerasProto.fit_params"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string predict_params = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predict_params()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->predict_params().data(), this->predict_params().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "keras.KerasProto.predict_params"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "keras.KerasProto.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nsamples = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nsamples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nfeatures = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nfeatures_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nlabels = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlabels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 batch_size = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 epochs = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epochs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 verbose = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verbose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .keras.TensorProto inputs = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .keras.TensorProto outputs = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 progress_callback = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &progress_callback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .keras.KerasCommand command = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command(static_cast< ::keras::KerasCommand >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:keras.KerasProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:keras.KerasProto)
  return false;
#undef DO_
}

void KerasProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:keras.KerasProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph = 1;
  if (this->graph().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph().data(), this->graph().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.KerasProto.graph");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->graph(), output);
  }

  // bytes model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->model(), output);
  }

  // string model_path = 3;
  if (this->model_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_path().data(), this->model_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.KerasProto.model_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model_path(), output);
  }

  // string model_uuid = 4;
  if (this->model_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_uuid().data(), this->model_uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.KerasProto.model_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model_uuid(), output);
  }

  // string compile_params = 5;
  if (this->compile_params().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->compile_params().data(), this->compile_params().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.KerasProto.compile_params");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->compile_params(), output);
  }

  // string fit_params = 6;
  if (this->fit_params().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fit_params().data(), this->fit_params().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.KerasProto.fit_params");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fit_params(), output);
  }

  // string predict_params = 7;
  if (this->predict_params().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->predict_params().data(), this->predict_params().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.KerasProto.predict_params");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->predict_params(), output);
  }

  // string path = 8;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.KerasProto.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->path(), output);
  }

  // uint32 nsamples = 9;
  if (this->nsamples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->nsamples(), output);
  }

  // uint32 nfeatures = 10;
  if (this->nfeatures() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->nfeatures(), output);
  }

  // uint32 nlabels = 11;
  if (this->nlabels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->nlabels(), output);
  }

  // uint32 batch_size = 12;
  if (this->batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->batch_size(), output);
  }

  // uint32 epochs = 13;
  if (this->epochs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->epochs(), output);
  }

  // uint32 verbose = 14;
  if (this->verbose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->verbose(), output);
  }

  // repeated .keras.TensorProto inputs = 15;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->inputs(i), output);
  }

  // repeated .keras.TensorProto outputs = 16;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->outputs(i), output);
  }

  // uint64 progress_callback = 17;
  if (this->progress_callback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->progress_callback(), output);
  }

  // .keras.KerasCommand command = 18;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->command(), output);
  }

  // @@protoc_insertion_point(serialize_end:keras.KerasProto)
}

::google::protobuf::uint8* KerasProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:keras.KerasProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph = 1;
  if (this->graph().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph().data(), this->graph().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.KerasProto.graph");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->graph(), target);
  }

  // bytes model = 2;
  if (this->model().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->model(), target);
  }

  // string model_path = 3;
  if (this->model_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_path().data(), this->model_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.KerasProto.model_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model_path(), target);
  }

  // string model_uuid = 4;
  if (this->model_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_uuid().data(), this->model_uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.KerasProto.model_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->model_uuid(), target);
  }

  // string compile_params = 5;
  if (this->compile_params().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->compile_params().data(), this->compile_params().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.KerasProto.compile_params");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->compile_params(), target);
  }

  // string fit_params = 6;
  if (this->fit_params().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fit_params().data(), this->fit_params().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.KerasProto.fit_params");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fit_params(), target);
  }

  // string predict_params = 7;
  if (this->predict_params().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->predict_params().data(), this->predict_params().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.KerasProto.predict_params");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->predict_params(), target);
  }

  // string path = 8;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.KerasProto.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->path(), target);
  }

  // uint32 nsamples = 9;
  if (this->nsamples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->nsamples(), target);
  }

  // uint32 nfeatures = 10;
  if (this->nfeatures() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->nfeatures(), target);
  }

  // uint32 nlabels = 11;
  if (this->nlabels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->nlabels(), target);
  }

  // uint32 batch_size = 12;
  if (this->batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->batch_size(), target);
  }

  // uint32 epochs = 13;
  if (this->epochs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->epochs(), target);
  }

  // uint32 verbose = 14;
  if (this->verbose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->verbose(), target);
  }

  // repeated .keras.TensorProto inputs = 15;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->inputs(i), deterministic, target);
  }

  // repeated .keras.TensorProto outputs = 16;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->outputs(i), deterministic, target);
  }

  // uint64 progress_callback = 17;
  if (this->progress_callback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->progress_callback(), target);
  }

  // .keras.KerasCommand command = 18;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->command(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:keras.KerasProto)
  return target;
}

size_t KerasProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keras.KerasProto)
  size_t total_size = 0;

  // repeated .keras.TensorProto inputs = 15;
  {
    unsigned int count = this->inputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputs(i));
    }
  }

  // repeated .keras.TensorProto outputs = 16;
  {
    unsigned int count = this->outputs_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outputs(i));
    }
  }

  // string graph = 1;
  if (this->graph().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph());
  }

  // bytes model = 2;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->model());
  }

  // string model_path = 3;
  if (this->model_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_path());
  }

  // string model_uuid = 4;
  if (this->model_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_uuid());
  }

  // string compile_params = 5;
  if (this->compile_params().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->compile_params());
  }

  // string fit_params = 6;
  if (this->fit_params().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fit_params());
  }

  // string predict_params = 7;
  if (this->predict_params().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->predict_params());
  }

  // string path = 8;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // uint32 nsamples = 9;
  if (this->nsamples() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nsamples());
  }

  // uint32 nfeatures = 10;
  if (this->nfeatures() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nfeatures());
  }

  // uint32 nlabels = 11;
  if (this->nlabels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nlabels());
  }

  // uint32 batch_size = 12;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->batch_size());
  }

  // uint32 epochs = 13;
  if (this->epochs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->epochs());
  }

  // uint32 verbose = 14;
  if (this->verbose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verbose());
  }

  // uint64 progress_callback = 17;
  if (this->progress_callback() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->progress_callback());
  }

  // .keras.KerasCommand command = 18;
  if (this->command() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KerasProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:keras.KerasProto)
  GOOGLE_DCHECK_NE(&from, this);
  const KerasProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KerasProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:keras.KerasProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:keras.KerasProto)
    MergeFrom(*source);
  }
}

void KerasProto::MergeFrom(const KerasProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:keras.KerasProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.graph().size() > 0) {

    graph_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.graph_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.model_path().size() > 0) {

    model_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_path_);
  }
  if (from.model_uuid().size() > 0) {

    model_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_uuid_);
  }
  if (from.compile_params().size() > 0) {

    compile_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compile_params_);
  }
  if (from.fit_params().size() > 0) {

    fit_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fit_params_);
  }
  if (from.predict_params().size() > 0) {

    predict_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.predict_params_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.nsamples() != 0) {
    set_nsamples(from.nsamples());
  }
  if (from.nfeatures() != 0) {
    set_nfeatures(from.nfeatures());
  }
  if (from.nlabels() != 0) {
    set_nlabels(from.nlabels());
  }
  if (from.batch_size() != 0) {
    set_batch_size(from.batch_size());
  }
  if (from.epochs() != 0) {
    set_epochs(from.epochs());
  }
  if (from.verbose() != 0) {
    set_verbose(from.verbose());
  }
  if (from.progress_callback() != 0) {
    set_progress_callback(from.progress_callback());
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
}

void KerasProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:keras.KerasProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KerasProto::CopyFrom(const KerasProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keras.KerasProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KerasProto::IsInitialized() const {
  return true;
}

void KerasProto::Swap(KerasProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KerasProto::InternalSwap(KerasProto* other) {
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  graph_.Swap(&other->graph_);
  model_.Swap(&other->model_);
  model_path_.Swap(&other->model_path_);
  model_uuid_.Swap(&other->model_uuid_);
  compile_params_.Swap(&other->compile_params_);
  fit_params_.Swap(&other->fit_params_);
  predict_params_.Swap(&other->predict_params_);
  path_.Swap(&other->path_);
  std::swap(nsamples_, other->nsamples_);
  std::swap(nfeatures_, other->nfeatures_);
  std::swap(nlabels_, other->nlabels_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(epochs_, other->epochs_);
  std::swap(verbose_, other->verbose_);
  std::swap(progress_callback_, other->progress_callback_);
  std::swap(command_, other->command_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KerasProto::GetMetadata() const {
  protobuf_KerasProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KerasProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KerasProto

// string graph = 1;
void KerasProto::clear_graph() {
  graph_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KerasProto::graph() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.graph)
  return graph_.GetNoArena();
}
void KerasProto::set_graph(const ::std::string& value) {
  
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.graph)
}
#if LANG_CXX11
void KerasProto::set_graph(::std::string&& value) {
  
  graph_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.graph)
}
#endif
void KerasProto::set_graph(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.graph)
}
void KerasProto::set_graph(const char* value, size_t size) {
  
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.graph)
}
::std::string* KerasProto::mutable_graph() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.graph)
  return graph_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KerasProto::release_graph() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.graph)
  
  return graph_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KerasProto::set_allocated_graph(::std::string* graph) {
  if (graph != NULL) {
    
  } else {
    
  }
  graph_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.graph)
}

// bytes model = 2;
void KerasProto::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KerasProto::model() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.model)
  return model_.GetNoArena();
}
void KerasProto::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.model)
}
#if LANG_CXX11
void KerasProto::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.model)
}
#endif
void KerasProto::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.model)
}
void KerasProto::set_model(const void* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.model)
}
::std::string* KerasProto::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KerasProto::release_model() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KerasProto::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.model)
}

// string model_path = 3;
void KerasProto::clear_model_path() {
  model_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KerasProto::model_path() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.model_path)
  return model_path_.GetNoArena();
}
void KerasProto::set_model_path(const ::std::string& value) {
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.model_path)
}
#if LANG_CXX11
void KerasProto::set_model_path(::std::string&& value) {
  
  model_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.model_path)
}
#endif
void KerasProto::set_model_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.model_path)
}
void KerasProto::set_model_path(const char* value, size_t size) {
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.model_path)
}
::std::string* KerasProto::mutable_model_path() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.model_path)
  return model_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KerasProto::release_model_path() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.model_path)
  
  return model_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KerasProto::set_allocated_model_path(::std::string* model_path) {
  if (model_path != NULL) {
    
  } else {
    
  }
  model_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_path);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.model_path)
}

// string model_uuid = 4;
void KerasProto::clear_model_uuid() {
  model_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KerasProto::model_uuid() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.model_uuid)
  return model_uuid_.GetNoArena();
}
void KerasProto::set_model_uuid(const ::std::string& value) {
  
  model_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.model_uuid)
}
#if LANG_CXX11
void KerasProto::set_model_uuid(::std::string&& value) {
  
  model_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.model_uuid)
}
#endif
void KerasProto::set_model_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.model_uuid)
}
void KerasProto::set_model_uuid(const char* value, size_t size) {
  
  model_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.model_uuid)
}
::std::string* KerasProto::mutable_model_uuid() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.model_uuid)
  return model_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KerasProto::release_model_uuid() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.model_uuid)
  
  return model_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KerasProto::set_allocated_model_uuid(::std::string* model_uuid) {
  if (model_uuid != NULL) {
    
  } else {
    
  }
  model_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_uuid);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.model_uuid)
}

// string compile_params = 5;
void KerasProto::clear_compile_params() {
  compile_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KerasProto::compile_params() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.compile_params)
  return compile_params_.GetNoArena();
}
void KerasProto::set_compile_params(const ::std::string& value) {
  
  compile_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.compile_params)
}
#if LANG_CXX11
void KerasProto::set_compile_params(::std::string&& value) {
  
  compile_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.compile_params)
}
#endif
void KerasProto::set_compile_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  compile_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.compile_params)
}
void KerasProto::set_compile_params(const char* value, size_t size) {
  
  compile_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.compile_params)
}
::std::string* KerasProto::mutable_compile_params() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.compile_params)
  return compile_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KerasProto::release_compile_params() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.compile_params)
  
  return compile_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KerasProto::set_allocated_compile_params(::std::string* compile_params) {
  if (compile_params != NULL) {
    
  } else {
    
  }
  compile_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compile_params);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.compile_params)
}

// string fit_params = 6;
void KerasProto::clear_fit_params() {
  fit_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KerasProto::fit_params() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.fit_params)
  return fit_params_.GetNoArena();
}
void KerasProto::set_fit_params(const ::std::string& value) {
  
  fit_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.fit_params)
}
#if LANG_CXX11
void KerasProto::set_fit_params(::std::string&& value) {
  
  fit_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.fit_params)
}
#endif
void KerasProto::set_fit_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fit_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.fit_params)
}
void KerasProto::set_fit_params(const char* value, size_t size) {
  
  fit_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.fit_params)
}
::std::string* KerasProto::mutable_fit_params() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.fit_params)
  return fit_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KerasProto::release_fit_params() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.fit_params)
  
  return fit_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KerasProto::set_allocated_fit_params(::std::string* fit_params) {
  if (fit_params != NULL) {
    
  } else {
    
  }
  fit_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fit_params);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.fit_params)
}

// string predict_params = 7;
void KerasProto::clear_predict_params() {
  predict_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KerasProto::predict_params() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.predict_params)
  return predict_params_.GetNoArena();
}
void KerasProto::set_predict_params(const ::std::string& value) {
  
  predict_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.predict_params)
}
#if LANG_CXX11
void KerasProto::set_predict_params(::std::string&& value) {
  
  predict_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.predict_params)
}
#endif
void KerasProto::set_predict_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  predict_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.predict_params)
}
void KerasProto::set_predict_params(const char* value, size_t size) {
  
  predict_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.predict_params)
}
::std::string* KerasProto::mutable_predict_params() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.predict_params)
  return predict_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KerasProto::release_predict_params() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.predict_params)
  
  return predict_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KerasProto::set_allocated_predict_params(::std::string* predict_params) {
  if (predict_params != NULL) {
    
  } else {
    
  }
  predict_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), predict_params);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.predict_params)
}

// string path = 8;
void KerasProto::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KerasProto::path() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.path)
  return path_.GetNoArena();
}
void KerasProto::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.path)
}
#if LANG_CXX11
void KerasProto::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.path)
}
#endif
void KerasProto::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.path)
}
void KerasProto::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.path)
}
::std::string* KerasProto::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KerasProto::release_path() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KerasProto::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.path)
}

// uint32 nsamples = 9;
void KerasProto::clear_nsamples() {
  nsamples_ = 0u;
}
::google::protobuf::uint32 KerasProto::nsamples() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.nsamples)
  return nsamples_;
}
void KerasProto::set_nsamples(::google::protobuf::uint32 value) {
  
  nsamples_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.nsamples)
}

// uint32 nfeatures = 10;
void KerasProto::clear_nfeatures() {
  nfeatures_ = 0u;
}
::google::protobuf::uint32 KerasProto::nfeatures() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.nfeatures)
  return nfeatures_;
}
void KerasProto::set_nfeatures(::google::protobuf::uint32 value) {
  
  nfeatures_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.nfeatures)
}

// uint32 nlabels = 11;
void KerasProto::clear_nlabels() {
  nlabels_ = 0u;
}
::google::protobuf::uint32 KerasProto::nlabels() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.nlabels)
  return nlabels_;
}
void KerasProto::set_nlabels(::google::protobuf::uint32 value) {
  
  nlabels_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.nlabels)
}

// uint32 batch_size = 12;
void KerasProto::clear_batch_size() {
  batch_size_ = 0u;
}
::google::protobuf::uint32 KerasProto::batch_size() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.batch_size)
  return batch_size_;
}
void KerasProto::set_batch_size(::google::protobuf::uint32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.batch_size)
}

// uint32 epochs = 13;
void KerasProto::clear_epochs() {
  epochs_ = 0u;
}
::google::protobuf::uint32 KerasProto::epochs() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.epochs)
  return epochs_;
}
void KerasProto::set_epochs(::google::protobuf::uint32 value) {
  
  epochs_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.epochs)
}

// uint32 verbose = 14;
void KerasProto::clear_verbose() {
  verbose_ = 0u;
}
::google::protobuf::uint32 KerasProto::verbose() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.verbose)
  return verbose_;
}
void KerasProto::set_verbose(::google::protobuf::uint32 value) {
  
  verbose_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.verbose)
}

// repeated .keras.TensorProto inputs = 15;
int KerasProto::inputs_size() const {
  return inputs_.size();
}
void KerasProto::clear_inputs() {
  inputs_.Clear();
}
const ::keras::TensorProto& KerasProto::inputs(int index) const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.inputs)
  return inputs_.Get(index);
}
::keras::TensorProto* KerasProto::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.inputs)
  return inputs_.Mutable(index);
}
::keras::TensorProto* KerasProto::add_inputs() {
  // @@protoc_insertion_point(field_add:keras.KerasProto.inputs)
  return inputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::keras::TensorProto >*
KerasProto::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:keras.KerasProto.inputs)
  return &inputs_;
}
const ::google::protobuf::RepeatedPtrField< ::keras::TensorProto >&
KerasProto::inputs() const {
  // @@protoc_insertion_point(field_list:keras.KerasProto.inputs)
  return inputs_;
}

// repeated .keras.TensorProto outputs = 16;
int KerasProto::outputs_size() const {
  return outputs_.size();
}
void KerasProto::clear_outputs() {
  outputs_.Clear();
}
const ::keras::TensorProto& KerasProto::outputs(int index) const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.outputs)
  return outputs_.Get(index);
}
::keras::TensorProto* KerasProto::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.outputs)
  return outputs_.Mutable(index);
}
::keras::TensorProto* KerasProto::add_outputs() {
  // @@protoc_insertion_point(field_add:keras.KerasProto.outputs)
  return outputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::keras::TensorProto >*
KerasProto::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:keras.KerasProto.outputs)
  return &outputs_;
}
const ::google::protobuf::RepeatedPtrField< ::keras::TensorProto >&
KerasProto::outputs() const {
  // @@protoc_insertion_point(field_list:keras.KerasProto.outputs)
  return outputs_;
}

// uint64 progress_callback = 17;
void KerasProto::clear_progress_callback() {
  progress_callback_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 KerasProto::progress_callback() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.progress_callback)
  return progress_callback_;
}
void KerasProto::set_progress_callback(::google::protobuf::uint64 value) {
  
  progress_callback_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.progress_callback)
}

// .keras.KerasCommand command = 18;
void KerasProto::clear_command() {
  command_ = 0;
}
::keras::KerasCommand KerasProto::command() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.command)
  return static_cast< ::keras::KerasCommand >(command_);
}
void KerasProto::set_command(::keras::KerasCommand value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.command)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorProto::kTypeFieldNumber;
const int TensorProto::kFormatFieldNumber;
const int TensorProto::kCountFieldNumber;
const int TensorProto::kShapeFieldNumber;
const int TensorProto::kIndicesFieldNumber;
const int TensorProto::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorProto::TensorProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_KerasProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:keras.TensorProto)
}
TensorProto::TensorProto(const TensorProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shape_(from.shape_),
      indices_(from.indices_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:keras.TensorProto)
}

void TensorProto::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_) + sizeof(count_));
  _cached_size_ = 0;
}

TensorProto::~TensorProto() {
  // @@protoc_insertion_point(destructor:keras.TensorProto)
  SharedDtor();
}

void TensorProto::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TensorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorProto::descriptor() {
  protobuf_KerasProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KerasProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorProto& TensorProto::default_instance() {
  protobuf_KerasProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorProto* TensorProto::New(::google::protobuf::Arena* arena) const {
  TensorProto* n = new TensorProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:keras.TensorProto)
  shape_.Clear();
  indices_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_) + sizeof(count_));
}

bool TensorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:keras.TensorProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .keras.DataType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::keras::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .keras.TensorFormat format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::keras::TensorFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 shape = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shape())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 indices = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_indices())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_indices())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:keras.TensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:keras.TensorProto)
  return false;
#undef DO_
}

void TensorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:keras.TensorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .keras.DataType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .keras.TensorFormat format = 2;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->format(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // repeated int32 shape = 4;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->shape(i), output);
  }

  // repeated int32 indices = 5;
  if (this->indices_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_indices_cached_byte_size_);
  }
  for (int i = 0, n = this->indices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->indices(i), output);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:keras.TensorProto)
}

::google::protobuf::uint8* TensorProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:keras.TensorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .keras.DataType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .keras.TensorFormat format = 2;
  if (this->format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->format(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // repeated int32 shape = 4;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->shape_, target);
  }

  // repeated int32 indices = 5;
  if (this->indices_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _indices_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->indices_, target);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:keras.TensorProto)
  return target;
}

size_t TensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keras.TensorProto)
  size_t total_size = 0;

  // repeated int32 shape = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 indices = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _indices_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .keras.DataType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .keras.TensorFormat format = 2;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:keras.TensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:keras.TensorProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:keras.TensorProto)
    MergeFrom(*source);
  }
}

void TensorProto::MergeFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:keras.TensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  indices_.MergeFrom(from.indices_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void TensorProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:keras.TensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProto::CopyFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keras.TensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProto::IsInitialized() const {
  return true;
}

void TensorProto::Swap(TensorProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorProto::InternalSwap(TensorProto* other) {
  shape_.InternalSwap(&other->shape_);
  indices_.InternalSwap(&other->indices_);
  data_.Swap(&other->data_);
  std::swap(type_, other->type_);
  std::swap(format_, other->format_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorProto::GetMetadata() const {
  protobuf_KerasProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KerasProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorProto

// .keras.DataType type = 1;
void TensorProto::clear_type() {
  type_ = 0;
}
::keras::DataType TensorProto::type() const {
  // @@protoc_insertion_point(field_get:keras.TensorProto.type)
  return static_cast< ::keras::DataType >(type_);
}
void TensorProto::set_type(::keras::DataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:keras.TensorProto.type)
}

// .keras.TensorFormat format = 2;
void TensorProto::clear_format() {
  format_ = 0;
}
::keras::TensorFormat TensorProto::format() const {
  // @@protoc_insertion_point(field_get:keras.TensorProto.format)
  return static_cast< ::keras::TensorFormat >(format_);
}
void TensorProto::set_format(::keras::TensorFormat value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:keras.TensorProto.format)
}

// int32 count = 3;
void TensorProto::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 TensorProto::count() const {
  // @@protoc_insertion_point(field_get:keras.TensorProto.count)
  return count_;
}
void TensorProto::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:keras.TensorProto.count)
}

// repeated int32 shape = 4;
int TensorProto::shape_size() const {
  return shape_.size();
}
void TensorProto::clear_shape() {
  shape_.Clear();
}
::google::protobuf::int32 TensorProto::shape(int index) const {
  // @@protoc_insertion_point(field_get:keras.TensorProto.shape)
  return shape_.Get(index);
}
void TensorProto::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:keras.TensorProto.shape)
}
void TensorProto::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:keras.TensorProto.shape)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::shape() const {
  // @@protoc_insertion_point(field_list:keras.TensorProto.shape)
  return shape_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:keras.TensorProto.shape)
  return &shape_;
}

// repeated int32 indices = 5;
int TensorProto::indices_size() const {
  return indices_.size();
}
void TensorProto::clear_indices() {
  indices_.Clear();
}
::google::protobuf::int32 TensorProto::indices(int index) const {
  // @@protoc_insertion_point(field_get:keras.TensorProto.indices)
  return indices_.Get(index);
}
void TensorProto::set_indices(int index, ::google::protobuf::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:keras.TensorProto.indices)
}
void TensorProto::add_indices(::google::protobuf::int32 value) {
  indices_.Add(value);
  // @@protoc_insertion_point(field_add:keras.TensorProto.indices)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::indices() const {
  // @@protoc_insertion_point(field_list:keras.TensorProto.indices)
  return indices_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:keras.TensorProto.indices)
  return &indices_;
}

// bytes data = 6;
void TensorProto::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TensorProto::data() const {
  // @@protoc_insertion_point(field_get:keras.TensorProto.data)
  return data_.GetNoArena();
}
void TensorProto::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.TensorProto.data)
}
#if LANG_CXX11
void TensorProto::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.TensorProto.data)
}
#endif
void TensorProto::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.TensorProto.data)
}
void TensorProto::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.TensorProto.data)
}
::std::string* TensorProto::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:keras.TensorProto.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TensorProto::release_data() {
  // @@protoc_insertion_point(field_release:keras.TensorProto.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorProto::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:keras.TensorProto.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamConfigurationProto::kNameFieldNumber;
const int StreamConfigurationProto::kDimFieldNumber;
const int StreamConfigurationProto::kSparseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamConfigurationProto::StreamConfigurationProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_KerasProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:keras.StreamConfigurationProto)
}
StreamConfigurationProto::StreamConfigurationProto(const StreamConfigurationProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&dim_, &from.dim_,
    reinterpret_cast<char*>(&sparse_) -
    reinterpret_cast<char*>(&dim_) + sizeof(sparse_));
  // @@protoc_insertion_point(copy_constructor:keras.StreamConfigurationProto)
}

void StreamConfigurationProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dim_, 0, reinterpret_cast<char*>(&sparse_) -
    reinterpret_cast<char*>(&dim_) + sizeof(sparse_));
  _cached_size_ = 0;
}

StreamConfigurationProto::~StreamConfigurationProto() {
  // @@protoc_insertion_point(destructor:keras.StreamConfigurationProto)
  SharedDtor();
}

void StreamConfigurationProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StreamConfigurationProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamConfigurationProto::descriptor() {
  protobuf_KerasProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KerasProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamConfigurationProto& StreamConfigurationProto::default_instance() {
  protobuf_KerasProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamConfigurationProto* StreamConfigurationProto::New(::google::protobuf::Arena* arena) const {
  StreamConfigurationProto* n = new StreamConfigurationProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamConfigurationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:keras.StreamConfigurationProto)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dim_, 0, reinterpret_cast<char*>(&sparse_) -
    reinterpret_cast<char*>(&dim_) + sizeof(sparse_));
}

bool StreamConfigurationProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:keras.StreamConfigurationProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "keras.StreamConfigurationProto.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 dim = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sparse = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sparse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:keras.StreamConfigurationProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:keras.StreamConfigurationProto)
  return false;
#undef DO_
}

void StreamConfigurationProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:keras.StreamConfigurationProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.StreamConfigurationProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int64 dim = 2;
  if (this->dim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dim(), output);
  }

  // bool sparse = 3;
  if (this->sparse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sparse(), output);
  }

  // @@protoc_insertion_point(serialize_end:keras.StreamConfigurationProto)
}

::google::protobuf::uint8* StreamConfigurationProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:keras.StreamConfigurationProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.StreamConfigurationProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int64 dim = 2;
  if (this->dim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dim(), target);
  }

  // bool sparse = 3;
  if (this->sparse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sparse(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:keras.StreamConfigurationProto)
  return target;
}

size_t StreamConfigurationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keras.StreamConfigurationProto)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 dim = 2;
  if (this->dim() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dim());
  }

  // bool sparse = 3;
  if (this->sparse() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamConfigurationProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:keras.StreamConfigurationProto)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamConfigurationProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamConfigurationProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:keras.StreamConfigurationProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:keras.StreamConfigurationProto)
    MergeFrom(*source);
  }
}

void StreamConfigurationProto::MergeFrom(const StreamConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:keras.StreamConfigurationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.dim() != 0) {
    set_dim(from.dim());
  }
  if (from.sparse() != 0) {
    set_sparse(from.sparse());
  }
}

void StreamConfigurationProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:keras.StreamConfigurationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamConfigurationProto::CopyFrom(const StreamConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keras.StreamConfigurationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamConfigurationProto::IsInitialized() const {
  return true;
}

void StreamConfigurationProto::Swap(StreamConfigurationProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamConfigurationProto::InternalSwap(StreamConfigurationProto* other) {
  name_.Swap(&other->name_);
  std::swap(dim_, other->dim_);
  std::swap(sparse_, other->sparse_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamConfigurationProto::GetMetadata() const {
  protobuf_KerasProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KerasProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamConfigurationProto

// string name = 1;
void StreamConfigurationProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StreamConfigurationProto::name() const {
  // @@protoc_insertion_point(field_get:keras.StreamConfigurationProto.name)
  return name_.GetNoArena();
}
void StreamConfigurationProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.StreamConfigurationProto.name)
}
#if LANG_CXX11
void StreamConfigurationProto::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.StreamConfigurationProto.name)
}
#endif
void StreamConfigurationProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.StreamConfigurationProto.name)
}
void StreamConfigurationProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.StreamConfigurationProto.name)
}
::std::string* StreamConfigurationProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:keras.StreamConfigurationProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StreamConfigurationProto::release_name() {
  // @@protoc_insertion_point(field_release:keras.StreamConfigurationProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamConfigurationProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:keras.StreamConfigurationProto.name)
}

// int64 dim = 2;
void StreamConfigurationProto::clear_dim() {
  dim_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 StreamConfigurationProto::dim() const {
  // @@protoc_insertion_point(field_get:keras.StreamConfigurationProto.dim)
  return dim_;
}
void StreamConfigurationProto::set_dim(::google::protobuf::int64 value) {
  
  dim_ = value;
  // @@protoc_insertion_point(field_set:keras.StreamConfigurationProto.dim)
}

// bool sparse = 3;
void StreamConfigurationProto::clear_sparse() {
  sparse_ = false;
}
bool StreamConfigurationProto::sparse() const {
  // @@protoc_insertion_point(field_get:keras.StreamConfigurationProto.sparse)
  return sparse_;
}
void StreamConfigurationProto::set_sparse(bool value) {
  
  sparse_ = value;
  // @@protoc_insertion_point(field_set:keras.StreamConfigurationProto.sparse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextDataSourceProto::kPathFieldNumber;
const int TextDataSourceProto::kStreamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextDataSourceProto::TextDataSourceProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_KerasProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:keras.TextDataSourceProto)
}
TextDataSourceProto::TextDataSourceProto(const TextDataSourceProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      streams_(from.streams_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:keras.TextDataSourceProto)
}

void TextDataSourceProto::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TextDataSourceProto::~TextDataSourceProto() {
  // @@protoc_insertion_point(destructor:keras.TextDataSourceProto)
  SharedDtor();
}

void TextDataSourceProto::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TextDataSourceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextDataSourceProto::descriptor() {
  protobuf_KerasProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KerasProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TextDataSourceProto& TextDataSourceProto::default_instance() {
  protobuf_KerasProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

TextDataSourceProto* TextDataSourceProto::New(::google::protobuf::Arena* arena) const {
  TextDataSourceProto* n = new TextDataSourceProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextDataSourceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:keras.TextDataSourceProto)
  streams_.Clear();
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TextDataSourceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:keras.TextDataSourceProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "keras.TextDataSourceProto.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .keras.StreamConfigurationProto streams = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_streams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:keras.TextDataSourceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:keras.TextDataSourceProto)
  return false;
#undef DO_
}

void TextDataSourceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:keras.TextDataSourceProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.TextDataSourceProto.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // repeated .keras.StreamConfigurationProto streams = 2;
  for (unsigned int i = 0, n = this->streams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->streams(i), output);
  }

  // @@protoc_insertion_point(serialize_end:keras.TextDataSourceProto)
}

::google::protobuf::uint8* TextDataSourceProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:keras.TextDataSourceProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.TextDataSourceProto.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // repeated .keras.StreamConfigurationProto streams = 2;
  for (unsigned int i = 0, n = this->streams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->streams(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:keras.TextDataSourceProto)
  return target;
}

size_t TextDataSourceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keras.TextDataSourceProto)
  size_t total_size = 0;

  // repeated .keras.StreamConfigurationProto streams = 2;
  {
    unsigned int count = this->streams_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streams(i));
    }
  }

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextDataSourceProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:keras.TextDataSourceProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TextDataSourceProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TextDataSourceProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:keras.TextDataSourceProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:keras.TextDataSourceProto)
    MergeFrom(*source);
  }
}

void TextDataSourceProto::MergeFrom(const TextDataSourceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:keras.TextDataSourceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  streams_.MergeFrom(from.streams_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void TextDataSourceProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:keras.TextDataSourceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextDataSourceProto::CopyFrom(const TextDataSourceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keras.TextDataSourceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextDataSourceProto::IsInitialized() const {
  return true;
}

void TextDataSourceProto::Swap(TextDataSourceProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextDataSourceProto::InternalSwap(TextDataSourceProto* other) {
  streams_.InternalSwap(&other->streams_);
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextDataSourceProto::GetMetadata() const {
  protobuf_KerasProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KerasProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextDataSourceProto

// string path = 1;
void TextDataSourceProto::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TextDataSourceProto::path() const {
  // @@protoc_insertion_point(field_get:keras.TextDataSourceProto.path)
  return path_.GetNoArena();
}
void TextDataSourceProto::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.TextDataSourceProto.path)
}
#if LANG_CXX11
void TextDataSourceProto::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.TextDataSourceProto.path)
}
#endif
void TextDataSourceProto::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.TextDataSourceProto.path)
}
void TextDataSourceProto::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.TextDataSourceProto.path)
}
::std::string* TextDataSourceProto::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:keras.TextDataSourceProto.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TextDataSourceProto::release_path() {
  // @@protoc_insertion_point(field_release:keras.TextDataSourceProto.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextDataSourceProto::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:keras.TextDataSourceProto.path)
}

// repeated .keras.StreamConfigurationProto streams = 2;
int TextDataSourceProto::streams_size() const {
  return streams_.size();
}
void TextDataSourceProto::clear_streams() {
  streams_.Clear();
}
const ::keras::StreamConfigurationProto& TextDataSourceProto::streams(int index) const {
  // @@protoc_insertion_point(field_get:keras.TextDataSourceProto.streams)
  return streams_.Get(index);
}
::keras::StreamConfigurationProto* TextDataSourceProto::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:keras.TextDataSourceProto.streams)
  return streams_.Mutable(index);
}
::keras::StreamConfigurationProto* TextDataSourceProto::add_streams() {
  // @@protoc_insertion_point(field_add:keras.TextDataSourceProto.streams)
  return streams_.Add();
}
::google::protobuf::RepeatedPtrField< ::keras::StreamConfigurationProto >*
TextDataSourceProto::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:keras.TextDataSourceProto.streams)
  return &streams_;
}
const ::google::protobuf::RepeatedPtrField< ::keras::StreamConfigurationProto >&
TextDataSourceProto::streams() const {
  // @@protoc_insertion_point(field_list:keras.TextDataSourceProto.streams)
  return streams_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryProto::kTypeFieldNumber;
const int HistoryProto::kIdFieldNumber;
const int HistoryProto::kNamesFieldNumber;
const int HistoryProto::kValuesFieldNumber;
const int HistoryProto::kNsamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryProto::HistoryProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_KerasProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:keras.HistoryProto)
}
HistoryProto::HistoryProto(const HistoryProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      names_(from.names_),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&nsamples_) -
    reinterpret_cast<char*>(&type_) + sizeof(nsamples_));
  // @@protoc_insertion_point(copy_constructor:keras.HistoryProto)
}

void HistoryProto::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&nsamples_) -
    reinterpret_cast<char*>(&type_) + sizeof(nsamples_));
  _cached_size_ = 0;
}

HistoryProto::~HistoryProto() {
  // @@protoc_insertion_point(destructor:keras.HistoryProto)
  SharedDtor();
}

void HistoryProto::SharedDtor() {
}

void HistoryProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryProto::descriptor() {
  protobuf_KerasProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KerasProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoryProto& HistoryProto::default_instance() {
  protobuf_KerasProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

HistoryProto* HistoryProto::New(::google::protobuf::Arena* arena) const {
  HistoryProto* n = new HistoryProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:keras.HistoryProto)
  names_.Clear();
  values_.Clear();
  ::memset(&type_, 0, reinterpret_cast<char*>(&nsamples_) -
    reinterpret_cast<char*>(&type_) + sizeof(nsamples_));
}

bool HistoryProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:keras.HistoryProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .keras.HistoryCallbackType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::keras::HistoryCallbackType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string names = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "keras.HistoryProto.names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(33u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 nsamples = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nsamples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:keras.HistoryProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:keras.HistoryProto)
  return false;
#undef DO_
}

void HistoryProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:keras.HistoryProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .keras.HistoryCallbackType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // repeated string names = 3;
  for (int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.HistoryProto.names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->names(i), output);
  }

  // repeated double values = 4;
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->values().data(), this->values_size(), output);
  }

  // uint64 nsamples = 5;
  if (this->nsamples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->nsamples(), output);
  }

  // @@protoc_insertion_point(serialize_end:keras.HistoryProto)
}

::google::protobuf::uint8* HistoryProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:keras.HistoryProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .keras.HistoryCallbackType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // repeated string names = 3;
  for (int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "keras.HistoryProto.names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->names(i), target);
  }

  // repeated double values = 4;
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _values_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->values_, target);
  }

  // uint64 nsamples = 5;
  if (this->nsamples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->nsamples(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:keras.HistoryProto)
  return target;
}

size_t HistoryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keras.HistoryProto)
  size_t total_size = 0;

  // repeated string names = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->names_size());
  for (int i = 0, n = this->names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  // repeated double values = 4;
  {
    unsigned int count = this->values_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .keras.HistoryCallbackType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint64 nsamples = 5;
  if (this->nsamples() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nsamples());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:keras.HistoryProto)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoryProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:keras.HistoryProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:keras.HistoryProto)
    MergeFrom(*source);
  }
}

void HistoryProto::MergeFrom(const HistoryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:keras.HistoryProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  values_.MergeFrom(from.values_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.nsamples() != 0) {
    set_nsamples(from.nsamples());
  }
}

void HistoryProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:keras.HistoryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryProto::CopyFrom(const HistoryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keras.HistoryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryProto::IsInitialized() const {
  return true;
}

void HistoryProto::Swap(HistoryProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryProto::InternalSwap(HistoryProto* other) {
  names_.InternalSwap(&other->names_);
  values_.InternalSwap(&other->values_);
  std::swap(type_, other->type_);
  std::swap(id_, other->id_);
  std::swap(nsamples_, other->nsamples_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistoryProto::GetMetadata() const {
  protobuf_KerasProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KerasProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryProto

// .keras.HistoryCallbackType type = 1;
void HistoryProto::clear_type() {
  type_ = 0;
}
::keras::HistoryCallbackType HistoryProto::type() const {
  // @@protoc_insertion_point(field_get:keras.HistoryProto.type)
  return static_cast< ::keras::HistoryCallbackType >(type_);
}
void HistoryProto::set_type(::keras::HistoryCallbackType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:keras.HistoryProto.type)
}

// uint32 id = 2;
void HistoryProto::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 HistoryProto::id() const {
  // @@protoc_insertion_point(field_get:keras.HistoryProto.id)
  return id_;
}
void HistoryProto::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:keras.HistoryProto.id)
}

// repeated string names = 3;
int HistoryProto::names_size() const {
  return names_.size();
}
void HistoryProto::clear_names() {
  names_.Clear();
}
const ::std::string& HistoryProto::names(int index) const {
  // @@protoc_insertion_point(field_get:keras.HistoryProto.names)
  return names_.Get(index);
}
::std::string* HistoryProto::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:keras.HistoryProto.names)
  return names_.Mutable(index);
}
void HistoryProto::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:keras.HistoryProto.names)
  names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void HistoryProto::set_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:keras.HistoryProto.names)
  names_.Mutable(index)->assign(std::move(value));
}
#endif
void HistoryProto::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:keras.HistoryProto.names)
}
void HistoryProto::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:keras.HistoryProto.names)
}
::std::string* HistoryProto::add_names() {
  // @@protoc_insertion_point(field_add_mutable:keras.HistoryProto.names)
  return names_.Add();
}
void HistoryProto::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:keras.HistoryProto.names)
}
#if LANG_CXX11
void HistoryProto::add_names(::std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:keras.HistoryProto.names)
}
#endif
void HistoryProto::add_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:keras.HistoryProto.names)
}
void HistoryProto::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:keras.HistoryProto.names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
HistoryProto::names() const {
  // @@protoc_insertion_point(field_list:keras.HistoryProto.names)
  return names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
HistoryProto::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:keras.HistoryProto.names)
  return &names_;
}

// repeated double values = 4;
int HistoryProto::values_size() const {
  return values_.size();
}
void HistoryProto::clear_values() {
  values_.Clear();
}
double HistoryProto::values(int index) const {
  // @@protoc_insertion_point(field_get:keras.HistoryProto.values)
  return values_.Get(index);
}
void HistoryProto::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:keras.HistoryProto.values)
}
void HistoryProto::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:keras.HistoryProto.values)
}
const ::google::protobuf::RepeatedField< double >&
HistoryProto::values() const {
  // @@protoc_insertion_point(field_list:keras.HistoryProto.values)
  return values_;
}
::google::protobuf::RepeatedField< double >*
HistoryProto::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:keras.HistoryProto.values)
  return &values_;
}

// uint64 nsamples = 5;
void HistoryProto::clear_nsamples() {
  nsamples_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 HistoryProto::nsamples() const {
  // @@protoc_insertion_point(field_get:keras.HistoryProto.nsamples)
  return nsamples_;
}
void HistoryProto::set_nsamples(::google::protobuf::uint64 value) {
  
  nsamples_ = value;
  // @@protoc_insertion_point(field_set:keras.HistoryProto.nsamples)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace keras

// @@protoc_insertion_point(global_scope)
