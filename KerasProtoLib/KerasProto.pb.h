// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KerasProto.proto

#ifndef PROTOBUF_KerasProto_2eproto__INCLUDED
#define PROTOBUF_KerasProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_KerasProto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsKerasProtoImpl();
void InitDefaultsKerasProto();
void InitDefaultsTensorProtoImpl();
void InitDefaultsTensorProto();
void InitDefaultsStreamConfigurationProtoImpl();
void InitDefaultsStreamConfigurationProto();
void InitDefaultsTextDataSourceProtoImpl();
void InitDefaultsTextDataSourceProto();
void InitDefaultsHistoryProtoImpl();
void InitDefaultsHistoryProto();
inline void InitDefaults() {
  InitDefaultsKerasProto();
  InitDefaultsTensorProto();
  InitDefaultsStreamConfigurationProto();
  InitDefaultsTextDataSourceProto();
  InitDefaultsHistoryProto();
}
}  // namespace protobuf_KerasProto_2eproto
namespace keras {
class HistoryProto;
class HistoryProtoDefaultTypeInternal;
extern HistoryProtoDefaultTypeInternal _HistoryProto_default_instance_;
class KerasProto;
class KerasProtoDefaultTypeInternal;
extern KerasProtoDefaultTypeInternal _KerasProto_default_instance_;
class StreamConfigurationProto;
class StreamConfigurationProtoDefaultTypeInternal;
extern StreamConfigurationProtoDefaultTypeInternal _StreamConfigurationProto_default_instance_;
class TensorProto;
class TensorProtoDefaultTypeInternal;
extern TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
class TextDataSourceProto;
class TextDataSourceProtoDefaultTypeInternal;
extern TextDataSourceProtoDefaultTypeInternal _TextDataSourceProto_default_instance_;
}  // namespace keras
namespace keras {

enum KerasCommand {
  Fit = 0,
  Predict = 1,
  KerasCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  KerasCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool KerasCommand_IsValid(int value);
const KerasCommand KerasCommand_MIN = Fit;
const KerasCommand KerasCommand_MAX = Predict;
const int KerasCommand_ARRAYSIZE = KerasCommand_MAX + 1;

const ::google::protobuf::EnumDescriptor* KerasCommand_descriptor();
inline const ::std::string& KerasCommand_Name(KerasCommand value) {
  return ::google::protobuf::internal::NameOfEnum(
    KerasCommand_descriptor(), value);
}
inline bool KerasCommand_Parse(
    const ::std::string& name, KerasCommand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KerasCommand>(
    KerasCommand_descriptor(), name, value);
}
enum TensorFormat {
  RowMajor = 0,
  ColumnMajor = 1,
  TensorFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TensorFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TensorFormat_IsValid(int value);
const TensorFormat TensorFormat_MIN = RowMajor;
const TensorFormat TensorFormat_MAX = ColumnMajor;
const int TensorFormat_ARRAYSIZE = TensorFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* TensorFormat_descriptor();
inline const ::std::string& TensorFormat_Name(TensorFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    TensorFormat_descriptor(), value);
}
inline bool TensorFormat_Parse(
    const ::std::string& name, TensorFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TensorFormat>(
    TensorFormat_descriptor(), name, value);
}
enum DataType {
  Float = 0,
  Double = 1,
  Int32 = 2,
  Int64 = 3,
  UInt32 = 4,
  UInt64 = 5,
  String = 6,
  Int8 = 7,
  Int16 = 8,
  UInt8 = 9,
  UInt16 = 10,
  Bool = 11,
  Undefined = 12,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = Float;
const DataType DataType_MAX = Undefined;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum HistoryCallbackType {
  TrainingBegin = 0,
  TrainingEnd = 1,
  BatchBegin = 2,
  BatchEnd = 3,
  EpochBegin = 4,
  EpochEnd = 5,
  HistoryCallbackType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HistoryCallbackType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HistoryCallbackType_IsValid(int value);
const HistoryCallbackType HistoryCallbackType_MIN = TrainingBegin;
const HistoryCallbackType HistoryCallbackType_MAX = EpochEnd;
const int HistoryCallbackType_ARRAYSIZE = HistoryCallbackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HistoryCallbackType_descriptor();
inline const ::std::string& HistoryCallbackType_Name(HistoryCallbackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HistoryCallbackType_descriptor(), value);
}
inline bool HistoryCallbackType_Parse(
    const ::std::string& name, HistoryCallbackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HistoryCallbackType>(
    HistoryCallbackType_descriptor(), name, value);
}
// ===================================================================

class KerasProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:keras.KerasProto) */ {
 public:
  KerasProto();
  virtual ~KerasProto();

  KerasProto(const KerasProto& from);

  inline KerasProto& operator=(const KerasProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KerasProto(KerasProto&& from) noexcept
    : KerasProto() {
    *this = ::std::move(from);
  }

  inline KerasProto& operator=(KerasProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KerasProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KerasProto* internal_default_instance() {
    return reinterpret_cast<const KerasProto*>(
               &_KerasProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(KerasProto* other);
  friend void swap(KerasProto& a, KerasProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KerasProto* New() const PROTOBUF_FINAL { return New(NULL); }

  KerasProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KerasProto& from);
  void MergeFrom(const KerasProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KerasProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .keras.TensorProto inputs = 15;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 15;
  const ::keras::TensorProto& inputs(int index) const;
  ::keras::TensorProto* mutable_inputs(int index);
  ::keras::TensorProto* add_inputs();
  ::google::protobuf::RepeatedPtrField< ::keras::TensorProto >*
      mutable_inputs();
  const ::google::protobuf::RepeatedPtrField< ::keras::TensorProto >&
      inputs() const;

  // repeated .keras.TensorProto outputs = 16;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 16;
  const ::keras::TensorProto& outputs(int index) const;
  ::keras::TensorProto* mutable_outputs(int index);
  ::keras::TensorProto* add_outputs();
  ::google::protobuf::RepeatedPtrField< ::keras::TensorProto >*
      mutable_outputs();
  const ::google::protobuf::RepeatedPtrField< ::keras::TensorProto >&
      outputs() const;

  // string graph = 1;
  void clear_graph();
  static const int kGraphFieldNumber = 1;
  const ::std::string& graph() const;
  void set_graph(const ::std::string& value);
  #if LANG_CXX11
  void set_graph(::std::string&& value);
  #endif
  void set_graph(const char* value);
  void set_graph(const char* value, size_t size);
  ::std::string* mutable_graph();
  ::std::string* release_graph();
  void set_allocated_graph(::std::string* graph);

  // bytes model = 2;
  void clear_model();
  static const int kModelFieldNumber = 2;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const void* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // string model_path = 3;
  void clear_model_path();
  static const int kModelPathFieldNumber = 3;
  const ::std::string& model_path() const;
  void set_model_path(const ::std::string& value);
  #if LANG_CXX11
  void set_model_path(::std::string&& value);
  #endif
  void set_model_path(const char* value);
  void set_model_path(const char* value, size_t size);
  ::std::string* mutable_model_path();
  ::std::string* release_model_path();
  void set_allocated_model_path(::std::string* model_path);

  // string model_uuid = 4;
  void clear_model_uuid();
  static const int kModelUuidFieldNumber = 4;
  const ::std::string& model_uuid() const;
  void set_model_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_model_uuid(::std::string&& value);
  #endif
  void set_model_uuid(const char* value);
  void set_model_uuid(const char* value, size_t size);
  ::std::string* mutable_model_uuid();
  ::std::string* release_model_uuid();
  void set_allocated_model_uuid(::std::string* model_uuid);

  // string compile_params = 5;
  void clear_compile_params();
  static const int kCompileParamsFieldNumber = 5;
  const ::std::string& compile_params() const;
  void set_compile_params(const ::std::string& value);
  #if LANG_CXX11
  void set_compile_params(::std::string&& value);
  #endif
  void set_compile_params(const char* value);
  void set_compile_params(const char* value, size_t size);
  ::std::string* mutable_compile_params();
  ::std::string* release_compile_params();
  void set_allocated_compile_params(::std::string* compile_params);

  // string fit_params = 6;
  void clear_fit_params();
  static const int kFitParamsFieldNumber = 6;
  const ::std::string& fit_params() const;
  void set_fit_params(const ::std::string& value);
  #if LANG_CXX11
  void set_fit_params(::std::string&& value);
  #endif
  void set_fit_params(const char* value);
  void set_fit_params(const char* value, size_t size);
  ::std::string* mutable_fit_params();
  ::std::string* release_fit_params();
  void set_allocated_fit_params(::std::string* fit_params);

  // string predict_params = 7;
  void clear_predict_params();
  static const int kPredictParamsFieldNumber = 7;
  const ::std::string& predict_params() const;
  void set_predict_params(const ::std::string& value);
  #if LANG_CXX11
  void set_predict_params(::std::string&& value);
  #endif
  void set_predict_params(const char* value);
  void set_predict_params(const char* value, size_t size);
  ::std::string* mutable_predict_params();
  ::std::string* release_predict_params();
  void set_allocated_predict_params(::std::string* predict_params);

  // string path = 8;
  void clear_path();
  static const int kPathFieldNumber = 8;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // uint32 nsamples = 9;
  void clear_nsamples();
  static const int kNsamplesFieldNumber = 9;
  ::google::protobuf::uint32 nsamples() const;
  void set_nsamples(::google::protobuf::uint32 value);

  // uint32 nfeatures = 10;
  void clear_nfeatures();
  static const int kNfeaturesFieldNumber = 10;
  ::google::protobuf::uint32 nfeatures() const;
  void set_nfeatures(::google::protobuf::uint32 value);

  // uint32 nlabels = 11;
  void clear_nlabels();
  static const int kNlabelsFieldNumber = 11;
  ::google::protobuf::uint32 nlabels() const;
  void set_nlabels(::google::protobuf::uint32 value);

  // uint32 batch_size = 12;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 12;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // uint32 epochs = 13;
  void clear_epochs();
  static const int kEpochsFieldNumber = 13;
  ::google::protobuf::uint32 epochs() const;
  void set_epochs(::google::protobuf::uint32 value);

  // uint32 verbose = 14;
  void clear_verbose();
  static const int kVerboseFieldNumber = 14;
  ::google::protobuf::uint32 verbose() const;
  void set_verbose(::google::protobuf::uint32 value);

  // uint64 progress_callback = 17;
  void clear_progress_callback();
  static const int kProgressCallbackFieldNumber = 17;
  ::google::protobuf::uint64 progress_callback() const;
  void set_progress_callback(::google::protobuf::uint64 value);

  // .keras.KerasCommand command = 18;
  void clear_command();
  static const int kCommandFieldNumber = 18;
  ::keras::KerasCommand command() const;
  void set_command(::keras::KerasCommand value);

  // @@protoc_insertion_point(class_scope:keras.KerasProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::keras::TensorProto > inputs_;
  ::google::protobuf::RepeatedPtrField< ::keras::TensorProto > outputs_;
  ::google::protobuf::internal::ArenaStringPtr graph_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr model_path_;
  ::google::protobuf::internal::ArenaStringPtr model_uuid_;
  ::google::protobuf::internal::ArenaStringPtr compile_params_;
  ::google::protobuf::internal::ArenaStringPtr fit_params_;
  ::google::protobuf::internal::ArenaStringPtr predict_params_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::uint32 nsamples_;
  ::google::protobuf::uint32 nfeatures_;
  ::google::protobuf::uint32 nlabels_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 epochs_;
  ::google::protobuf::uint32 verbose_;
  ::google::protobuf::uint64 progress_callback_;
  int command_;
  mutable int _cached_size_;
  friend struct ::protobuf_KerasProto_2eproto::TableStruct;
  friend void ::protobuf_KerasProto_2eproto::InitDefaultsKerasProtoImpl();
};
// -------------------------------------------------------------------

class TensorProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:keras.TensorProto) */ {
 public:
  TensorProto();
  virtual ~TensorProto();

  TensorProto(const TensorProto& from);

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorProto(TensorProto&& from) noexcept
    : TensorProto() {
    *this = ::std::move(from);
  }

  inline TensorProto& operator=(TensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorProto* internal_default_instance() {
    return reinterpret_cast<const TensorProto*>(
               &_TensorProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TensorProto* other);
  friend void swap(TensorProto& a, TensorProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorProto* New() const PROTOBUF_FINAL { return New(NULL); }

  TensorProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TensorProto& from);
  void MergeFrom(const TensorProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TensorProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 shape = 4;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 4;
  ::google::protobuf::int32 shape(int index) const;
  void set_shape(int index, ::google::protobuf::int32 value);
  void add_shape(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // repeated int32 indices = 5;
  int indices_size() const;
  void clear_indices();
  static const int kIndicesFieldNumber = 5;
  ::google::protobuf::int32 indices(int index) const;
  void set_indices(int index, ::google::protobuf::int32 value);
  void add_indices(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      indices() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_indices();

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .keras.DataType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::keras::DataType type() const;
  void set_type(::keras::DataType value);

  // .keras.TensorFormat format = 2;
  void clear_format();
  static const int kFormatFieldNumber = 2;
  ::keras::TensorFormat format() const;
  void set_format(::keras::TensorFormat value);

  // int32 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:keras.TensorProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  mutable int _shape_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > indices_;
  mutable int _indices_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  int format_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend struct ::protobuf_KerasProto_2eproto::TableStruct;
  friend void ::protobuf_KerasProto_2eproto::InitDefaultsTensorProtoImpl();
};
// -------------------------------------------------------------------

class StreamConfigurationProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:keras.StreamConfigurationProto) */ {
 public:
  StreamConfigurationProto();
  virtual ~StreamConfigurationProto();

  StreamConfigurationProto(const StreamConfigurationProto& from);

  inline StreamConfigurationProto& operator=(const StreamConfigurationProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamConfigurationProto(StreamConfigurationProto&& from) noexcept
    : StreamConfigurationProto() {
    *this = ::std::move(from);
  }

  inline StreamConfigurationProto& operator=(StreamConfigurationProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamConfigurationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamConfigurationProto* internal_default_instance() {
    return reinterpret_cast<const StreamConfigurationProto*>(
               &_StreamConfigurationProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(StreamConfigurationProto* other);
  friend void swap(StreamConfigurationProto& a, StreamConfigurationProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamConfigurationProto* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamConfigurationProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamConfigurationProto& from);
  void MergeFrom(const StreamConfigurationProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamConfigurationProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int64 dim = 2;
  void clear_dim();
  static const int kDimFieldNumber = 2;
  ::google::protobuf::int64 dim() const;
  void set_dim(::google::protobuf::int64 value);

  // bool sparse = 3;
  void clear_sparse();
  static const int kSparseFieldNumber = 3;
  bool sparse() const;
  void set_sparse(bool value);

  // @@protoc_insertion_point(class_scope:keras.StreamConfigurationProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 dim_;
  bool sparse_;
  mutable int _cached_size_;
  friend struct ::protobuf_KerasProto_2eproto::TableStruct;
  friend void ::protobuf_KerasProto_2eproto::InitDefaultsStreamConfigurationProtoImpl();
};
// -------------------------------------------------------------------

class TextDataSourceProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:keras.TextDataSourceProto) */ {
 public:
  TextDataSourceProto();
  virtual ~TextDataSourceProto();

  TextDataSourceProto(const TextDataSourceProto& from);

  inline TextDataSourceProto& operator=(const TextDataSourceProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TextDataSourceProto(TextDataSourceProto&& from) noexcept
    : TextDataSourceProto() {
    *this = ::std::move(from);
  }

  inline TextDataSourceProto& operator=(TextDataSourceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TextDataSourceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextDataSourceProto* internal_default_instance() {
    return reinterpret_cast<const TextDataSourceProto*>(
               &_TextDataSourceProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TextDataSourceProto* other);
  friend void swap(TextDataSourceProto& a, TextDataSourceProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TextDataSourceProto* New() const PROTOBUF_FINAL { return New(NULL); }

  TextDataSourceProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TextDataSourceProto& from);
  void MergeFrom(const TextDataSourceProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TextDataSourceProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .keras.StreamConfigurationProto streams = 2;
  int streams_size() const;
  void clear_streams();
  static const int kStreamsFieldNumber = 2;
  const ::keras::StreamConfigurationProto& streams(int index) const;
  ::keras::StreamConfigurationProto* mutable_streams(int index);
  ::keras::StreamConfigurationProto* add_streams();
  ::google::protobuf::RepeatedPtrField< ::keras::StreamConfigurationProto >*
      mutable_streams();
  const ::google::protobuf::RepeatedPtrField< ::keras::StreamConfigurationProto >&
      streams() const;

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:keras.TextDataSourceProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::keras::StreamConfigurationProto > streams_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_KerasProto_2eproto::TableStruct;
  friend void ::protobuf_KerasProto_2eproto::InitDefaultsTextDataSourceProtoImpl();
};
// -------------------------------------------------------------------

class HistoryProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:keras.HistoryProto) */ {
 public:
  HistoryProto();
  virtual ~HistoryProto();

  HistoryProto(const HistoryProto& from);

  inline HistoryProto& operator=(const HistoryProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HistoryProto(HistoryProto&& from) noexcept
    : HistoryProto() {
    *this = ::std::move(from);
  }

  inline HistoryProto& operator=(HistoryProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HistoryProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoryProto* internal_default_instance() {
    return reinterpret_cast<const HistoryProto*>(
               &_HistoryProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(HistoryProto* other);
  friend void swap(HistoryProto& a, HistoryProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HistoryProto* New() const PROTOBUF_FINAL { return New(NULL); }

  HistoryProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HistoryProto& from);
  void MergeFrom(const HistoryProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HistoryProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string names = 3;
  int names_size() const;
  void clear_names();
  static const int kNamesFieldNumber = 3;
  const ::std::string& names(int index) const;
  ::std::string* mutable_names(int index);
  void set_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_names(int index, ::std::string&& value);
  #endif
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  ::std::string* add_names();
  void add_names(const ::std::string& value);
  #if LANG_CXX11
  void add_names(::std::string&& value);
  #endif
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // repeated double values = 4;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 4;
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::google::protobuf::RepeatedField< double >&
      values() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_values();

  // .keras.HistoryCallbackType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::keras::HistoryCallbackType type() const;
  void set_type(::keras::HistoryCallbackType value);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint64 nsamples = 5;
  void clear_nsamples();
  static const int kNsamplesFieldNumber = 5;
  ::google::protobuf::uint64 nsamples() const;
  void set_nsamples(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:keras.HistoryProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::google::protobuf::RepeatedField< double > values_;
  mutable int _values_cached_byte_size_;
  int type_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint64 nsamples_;
  mutable int _cached_size_;
  friend struct ::protobuf_KerasProto_2eproto::TableStruct;
  friend void ::protobuf_KerasProto_2eproto::InitDefaultsHistoryProtoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KerasProto

// string graph = 1;
inline void KerasProto::clear_graph() {
  graph_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KerasProto::graph() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.graph)
  return graph_.GetNoArena();
}
inline void KerasProto::set_graph(const ::std::string& value) {
  
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.graph)
}
#if LANG_CXX11
inline void KerasProto::set_graph(::std::string&& value) {
  
  graph_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.graph)
}
#endif
inline void KerasProto::set_graph(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.graph)
}
inline void KerasProto::set_graph(const char* value, size_t size) {
  
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.graph)
}
inline ::std::string* KerasProto::mutable_graph() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.graph)
  return graph_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KerasProto::release_graph() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.graph)
  
  return graph_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KerasProto::set_allocated_graph(::std::string* graph) {
  if (graph != NULL) {
    
  } else {
    
  }
  graph_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.graph)
}

// bytes model = 2;
inline void KerasProto::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KerasProto::model() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.model)
  return model_.GetNoArena();
}
inline void KerasProto::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.model)
}
#if LANG_CXX11
inline void KerasProto::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.model)
}
#endif
inline void KerasProto::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.model)
}
inline void KerasProto::set_model(const void* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.model)
}
inline ::std::string* KerasProto::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KerasProto::release_model() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KerasProto::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.model)
}

// string model_path = 3;
inline void KerasProto::clear_model_path() {
  model_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KerasProto::model_path() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.model_path)
  return model_path_.GetNoArena();
}
inline void KerasProto::set_model_path(const ::std::string& value) {
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.model_path)
}
#if LANG_CXX11
inline void KerasProto::set_model_path(::std::string&& value) {
  
  model_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.model_path)
}
#endif
inline void KerasProto::set_model_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.model_path)
}
inline void KerasProto::set_model_path(const char* value, size_t size) {
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.model_path)
}
inline ::std::string* KerasProto::mutable_model_path() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.model_path)
  return model_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KerasProto::release_model_path() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.model_path)
  
  return model_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KerasProto::set_allocated_model_path(::std::string* model_path) {
  if (model_path != NULL) {
    
  } else {
    
  }
  model_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_path);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.model_path)
}

// string model_uuid = 4;
inline void KerasProto::clear_model_uuid() {
  model_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KerasProto::model_uuid() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.model_uuid)
  return model_uuid_.GetNoArena();
}
inline void KerasProto::set_model_uuid(const ::std::string& value) {
  
  model_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.model_uuid)
}
#if LANG_CXX11
inline void KerasProto::set_model_uuid(::std::string&& value) {
  
  model_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.model_uuid)
}
#endif
inline void KerasProto::set_model_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.model_uuid)
}
inline void KerasProto::set_model_uuid(const char* value, size_t size) {
  
  model_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.model_uuid)
}
inline ::std::string* KerasProto::mutable_model_uuid() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.model_uuid)
  return model_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KerasProto::release_model_uuid() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.model_uuid)
  
  return model_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KerasProto::set_allocated_model_uuid(::std::string* model_uuid) {
  if (model_uuid != NULL) {
    
  } else {
    
  }
  model_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_uuid);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.model_uuid)
}

// string compile_params = 5;
inline void KerasProto::clear_compile_params() {
  compile_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KerasProto::compile_params() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.compile_params)
  return compile_params_.GetNoArena();
}
inline void KerasProto::set_compile_params(const ::std::string& value) {
  
  compile_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.compile_params)
}
#if LANG_CXX11
inline void KerasProto::set_compile_params(::std::string&& value) {
  
  compile_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.compile_params)
}
#endif
inline void KerasProto::set_compile_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  compile_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.compile_params)
}
inline void KerasProto::set_compile_params(const char* value, size_t size) {
  
  compile_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.compile_params)
}
inline ::std::string* KerasProto::mutable_compile_params() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.compile_params)
  return compile_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KerasProto::release_compile_params() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.compile_params)
  
  return compile_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KerasProto::set_allocated_compile_params(::std::string* compile_params) {
  if (compile_params != NULL) {
    
  } else {
    
  }
  compile_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compile_params);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.compile_params)
}

// string fit_params = 6;
inline void KerasProto::clear_fit_params() {
  fit_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KerasProto::fit_params() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.fit_params)
  return fit_params_.GetNoArena();
}
inline void KerasProto::set_fit_params(const ::std::string& value) {
  
  fit_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.fit_params)
}
#if LANG_CXX11
inline void KerasProto::set_fit_params(::std::string&& value) {
  
  fit_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.fit_params)
}
#endif
inline void KerasProto::set_fit_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fit_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.fit_params)
}
inline void KerasProto::set_fit_params(const char* value, size_t size) {
  
  fit_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.fit_params)
}
inline ::std::string* KerasProto::mutable_fit_params() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.fit_params)
  return fit_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KerasProto::release_fit_params() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.fit_params)
  
  return fit_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KerasProto::set_allocated_fit_params(::std::string* fit_params) {
  if (fit_params != NULL) {
    
  } else {
    
  }
  fit_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fit_params);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.fit_params)
}

// string predict_params = 7;
inline void KerasProto::clear_predict_params() {
  predict_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KerasProto::predict_params() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.predict_params)
  return predict_params_.GetNoArena();
}
inline void KerasProto::set_predict_params(const ::std::string& value) {
  
  predict_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.predict_params)
}
#if LANG_CXX11
inline void KerasProto::set_predict_params(::std::string&& value) {
  
  predict_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.predict_params)
}
#endif
inline void KerasProto::set_predict_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  predict_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.predict_params)
}
inline void KerasProto::set_predict_params(const char* value, size_t size) {
  
  predict_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.predict_params)
}
inline ::std::string* KerasProto::mutable_predict_params() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.predict_params)
  return predict_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KerasProto::release_predict_params() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.predict_params)
  
  return predict_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KerasProto::set_allocated_predict_params(::std::string* predict_params) {
  if (predict_params != NULL) {
    
  } else {
    
  }
  predict_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), predict_params);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.predict_params)
}

// string path = 8;
inline void KerasProto::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KerasProto::path() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.path)
  return path_.GetNoArena();
}
inline void KerasProto::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.KerasProto.path)
}
#if LANG_CXX11
inline void KerasProto::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.KerasProto.path)
}
#endif
inline void KerasProto::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.KerasProto.path)
}
inline void KerasProto::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.KerasProto.path)
}
inline ::std::string* KerasProto::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KerasProto::release_path() {
  // @@protoc_insertion_point(field_release:keras.KerasProto.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KerasProto::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:keras.KerasProto.path)
}

// uint32 nsamples = 9;
inline void KerasProto::clear_nsamples() {
  nsamples_ = 0u;
}
inline ::google::protobuf::uint32 KerasProto::nsamples() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.nsamples)
  return nsamples_;
}
inline void KerasProto::set_nsamples(::google::protobuf::uint32 value) {
  
  nsamples_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.nsamples)
}

// uint32 nfeatures = 10;
inline void KerasProto::clear_nfeatures() {
  nfeatures_ = 0u;
}
inline ::google::protobuf::uint32 KerasProto::nfeatures() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.nfeatures)
  return nfeatures_;
}
inline void KerasProto::set_nfeatures(::google::protobuf::uint32 value) {
  
  nfeatures_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.nfeatures)
}

// uint32 nlabels = 11;
inline void KerasProto::clear_nlabels() {
  nlabels_ = 0u;
}
inline ::google::protobuf::uint32 KerasProto::nlabels() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.nlabels)
  return nlabels_;
}
inline void KerasProto::set_nlabels(::google::protobuf::uint32 value) {
  
  nlabels_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.nlabels)
}

// uint32 batch_size = 12;
inline void KerasProto::clear_batch_size() {
  batch_size_ = 0u;
}
inline ::google::protobuf::uint32 KerasProto::batch_size() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.batch_size)
  return batch_size_;
}
inline void KerasProto::set_batch_size(::google::protobuf::uint32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.batch_size)
}

// uint32 epochs = 13;
inline void KerasProto::clear_epochs() {
  epochs_ = 0u;
}
inline ::google::protobuf::uint32 KerasProto::epochs() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.epochs)
  return epochs_;
}
inline void KerasProto::set_epochs(::google::protobuf::uint32 value) {
  
  epochs_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.epochs)
}

// uint32 verbose = 14;
inline void KerasProto::clear_verbose() {
  verbose_ = 0u;
}
inline ::google::protobuf::uint32 KerasProto::verbose() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.verbose)
  return verbose_;
}
inline void KerasProto::set_verbose(::google::protobuf::uint32 value) {
  
  verbose_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.verbose)
}

// repeated .keras.TensorProto inputs = 15;
inline int KerasProto::inputs_size() const {
  return inputs_.size();
}
inline void KerasProto::clear_inputs() {
  inputs_.Clear();
}
inline const ::keras::TensorProto& KerasProto::inputs(int index) const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.inputs)
  return inputs_.Get(index);
}
inline ::keras::TensorProto* KerasProto::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.inputs)
  return inputs_.Mutable(index);
}
inline ::keras::TensorProto* KerasProto::add_inputs() {
  // @@protoc_insertion_point(field_add:keras.KerasProto.inputs)
  return inputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::keras::TensorProto >*
KerasProto::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:keras.KerasProto.inputs)
  return &inputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::keras::TensorProto >&
KerasProto::inputs() const {
  // @@protoc_insertion_point(field_list:keras.KerasProto.inputs)
  return inputs_;
}

// repeated .keras.TensorProto outputs = 16;
inline int KerasProto::outputs_size() const {
  return outputs_.size();
}
inline void KerasProto::clear_outputs() {
  outputs_.Clear();
}
inline const ::keras::TensorProto& KerasProto::outputs(int index) const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.outputs)
  return outputs_.Get(index);
}
inline ::keras::TensorProto* KerasProto::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:keras.KerasProto.outputs)
  return outputs_.Mutable(index);
}
inline ::keras::TensorProto* KerasProto::add_outputs() {
  // @@protoc_insertion_point(field_add:keras.KerasProto.outputs)
  return outputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::keras::TensorProto >*
KerasProto::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:keras.KerasProto.outputs)
  return &outputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::keras::TensorProto >&
KerasProto::outputs() const {
  // @@protoc_insertion_point(field_list:keras.KerasProto.outputs)
  return outputs_;
}

// uint64 progress_callback = 17;
inline void KerasProto::clear_progress_callback() {
  progress_callback_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 KerasProto::progress_callback() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.progress_callback)
  return progress_callback_;
}
inline void KerasProto::set_progress_callback(::google::protobuf::uint64 value) {
  
  progress_callback_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.progress_callback)
}

// .keras.KerasCommand command = 18;
inline void KerasProto::clear_command() {
  command_ = 0;
}
inline ::keras::KerasCommand KerasProto::command() const {
  // @@protoc_insertion_point(field_get:keras.KerasProto.command)
  return static_cast< ::keras::KerasCommand >(command_);
}
inline void KerasProto::set_command(::keras::KerasCommand value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:keras.KerasProto.command)
}

// -------------------------------------------------------------------

// TensorProto

// .keras.DataType type = 1;
inline void TensorProto::clear_type() {
  type_ = 0;
}
inline ::keras::DataType TensorProto::type() const {
  // @@protoc_insertion_point(field_get:keras.TensorProto.type)
  return static_cast< ::keras::DataType >(type_);
}
inline void TensorProto::set_type(::keras::DataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:keras.TensorProto.type)
}

// .keras.TensorFormat format = 2;
inline void TensorProto::clear_format() {
  format_ = 0;
}
inline ::keras::TensorFormat TensorProto::format() const {
  // @@protoc_insertion_point(field_get:keras.TensorProto.format)
  return static_cast< ::keras::TensorFormat >(format_);
}
inline void TensorProto::set_format(::keras::TensorFormat value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:keras.TensorProto.format)
}

// int32 count = 3;
inline void TensorProto::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 TensorProto::count() const {
  // @@protoc_insertion_point(field_get:keras.TensorProto.count)
  return count_;
}
inline void TensorProto::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:keras.TensorProto.count)
}

// repeated int32 shape = 4;
inline int TensorProto::shape_size() const {
  return shape_.size();
}
inline void TensorProto::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 TensorProto::shape(int index) const {
  // @@protoc_insertion_point(field_get:keras.TensorProto.shape)
  return shape_.Get(index);
}
inline void TensorProto::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:keras.TensorProto.shape)
}
inline void TensorProto::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:keras.TensorProto.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::shape() const {
  // @@protoc_insertion_point(field_list:keras.TensorProto.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:keras.TensorProto.shape)
  return &shape_;
}

// repeated int32 indices = 5;
inline int TensorProto::indices_size() const {
  return indices_.size();
}
inline void TensorProto::clear_indices() {
  indices_.Clear();
}
inline ::google::protobuf::int32 TensorProto::indices(int index) const {
  // @@protoc_insertion_point(field_get:keras.TensorProto.indices)
  return indices_.Get(index);
}
inline void TensorProto::set_indices(int index, ::google::protobuf::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:keras.TensorProto.indices)
}
inline void TensorProto::add_indices(::google::protobuf::int32 value) {
  indices_.Add(value);
  // @@protoc_insertion_point(field_add:keras.TensorProto.indices)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::indices() const {
  // @@protoc_insertion_point(field_list:keras.TensorProto.indices)
  return indices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:keras.TensorProto.indices)
  return &indices_;
}

// bytes data = 6;
inline void TensorProto::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TensorProto::data() const {
  // @@protoc_insertion_point(field_get:keras.TensorProto.data)
  return data_.GetNoArena();
}
inline void TensorProto::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.TensorProto.data)
}
#if LANG_CXX11
inline void TensorProto::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.TensorProto.data)
}
#endif
inline void TensorProto::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.TensorProto.data)
}
inline void TensorProto::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.TensorProto.data)
}
inline ::std::string* TensorProto::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:keras.TensorProto.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorProto::release_data() {
  // @@protoc_insertion_point(field_release:keras.TensorProto.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorProto::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:keras.TensorProto.data)
}

// -------------------------------------------------------------------

// StreamConfigurationProto

// string name = 1;
inline void StreamConfigurationProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamConfigurationProto::name() const {
  // @@protoc_insertion_point(field_get:keras.StreamConfigurationProto.name)
  return name_.GetNoArena();
}
inline void StreamConfigurationProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.StreamConfigurationProto.name)
}
#if LANG_CXX11
inline void StreamConfigurationProto::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.StreamConfigurationProto.name)
}
#endif
inline void StreamConfigurationProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.StreamConfigurationProto.name)
}
inline void StreamConfigurationProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.StreamConfigurationProto.name)
}
inline ::std::string* StreamConfigurationProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:keras.StreamConfigurationProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamConfigurationProto::release_name() {
  // @@protoc_insertion_point(field_release:keras.StreamConfigurationProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamConfigurationProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:keras.StreamConfigurationProto.name)
}

// int64 dim = 2;
inline void StreamConfigurationProto::clear_dim() {
  dim_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 StreamConfigurationProto::dim() const {
  // @@protoc_insertion_point(field_get:keras.StreamConfigurationProto.dim)
  return dim_;
}
inline void StreamConfigurationProto::set_dim(::google::protobuf::int64 value) {
  
  dim_ = value;
  // @@protoc_insertion_point(field_set:keras.StreamConfigurationProto.dim)
}

// bool sparse = 3;
inline void StreamConfigurationProto::clear_sparse() {
  sparse_ = false;
}
inline bool StreamConfigurationProto::sparse() const {
  // @@protoc_insertion_point(field_get:keras.StreamConfigurationProto.sparse)
  return sparse_;
}
inline void StreamConfigurationProto::set_sparse(bool value) {
  
  sparse_ = value;
  // @@protoc_insertion_point(field_set:keras.StreamConfigurationProto.sparse)
}

// -------------------------------------------------------------------

// TextDataSourceProto

// string path = 1;
inline void TextDataSourceProto::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TextDataSourceProto::path() const {
  // @@protoc_insertion_point(field_get:keras.TextDataSourceProto.path)
  return path_.GetNoArena();
}
inline void TextDataSourceProto::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:keras.TextDataSourceProto.path)
}
#if LANG_CXX11
inline void TextDataSourceProto::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:keras.TextDataSourceProto.path)
}
#endif
inline void TextDataSourceProto::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:keras.TextDataSourceProto.path)
}
inline void TextDataSourceProto::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:keras.TextDataSourceProto.path)
}
inline ::std::string* TextDataSourceProto::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:keras.TextDataSourceProto.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TextDataSourceProto::release_path() {
  // @@protoc_insertion_point(field_release:keras.TextDataSourceProto.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TextDataSourceProto::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:keras.TextDataSourceProto.path)
}

// repeated .keras.StreamConfigurationProto streams = 2;
inline int TextDataSourceProto::streams_size() const {
  return streams_.size();
}
inline void TextDataSourceProto::clear_streams() {
  streams_.Clear();
}
inline const ::keras::StreamConfigurationProto& TextDataSourceProto::streams(int index) const {
  // @@protoc_insertion_point(field_get:keras.TextDataSourceProto.streams)
  return streams_.Get(index);
}
inline ::keras::StreamConfigurationProto* TextDataSourceProto::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:keras.TextDataSourceProto.streams)
  return streams_.Mutable(index);
}
inline ::keras::StreamConfigurationProto* TextDataSourceProto::add_streams() {
  // @@protoc_insertion_point(field_add:keras.TextDataSourceProto.streams)
  return streams_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::keras::StreamConfigurationProto >*
TextDataSourceProto::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:keras.TextDataSourceProto.streams)
  return &streams_;
}
inline const ::google::protobuf::RepeatedPtrField< ::keras::StreamConfigurationProto >&
TextDataSourceProto::streams() const {
  // @@protoc_insertion_point(field_list:keras.TextDataSourceProto.streams)
  return streams_;
}

// -------------------------------------------------------------------

// HistoryProto

// .keras.HistoryCallbackType type = 1;
inline void HistoryProto::clear_type() {
  type_ = 0;
}
inline ::keras::HistoryCallbackType HistoryProto::type() const {
  // @@protoc_insertion_point(field_get:keras.HistoryProto.type)
  return static_cast< ::keras::HistoryCallbackType >(type_);
}
inline void HistoryProto::set_type(::keras::HistoryCallbackType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:keras.HistoryProto.type)
}

// uint32 id = 2;
inline void HistoryProto::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 HistoryProto::id() const {
  // @@protoc_insertion_point(field_get:keras.HistoryProto.id)
  return id_;
}
inline void HistoryProto::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:keras.HistoryProto.id)
}

// repeated string names = 3;
inline int HistoryProto::names_size() const {
  return names_.size();
}
inline void HistoryProto::clear_names() {
  names_.Clear();
}
inline const ::std::string& HistoryProto::names(int index) const {
  // @@protoc_insertion_point(field_get:keras.HistoryProto.names)
  return names_.Get(index);
}
inline ::std::string* HistoryProto::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:keras.HistoryProto.names)
  return names_.Mutable(index);
}
inline void HistoryProto::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:keras.HistoryProto.names)
  names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HistoryProto::set_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:keras.HistoryProto.names)
  names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HistoryProto::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:keras.HistoryProto.names)
}
inline void HistoryProto::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:keras.HistoryProto.names)
}
inline ::std::string* HistoryProto::add_names() {
  // @@protoc_insertion_point(field_add_mutable:keras.HistoryProto.names)
  return names_.Add();
}
inline void HistoryProto::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:keras.HistoryProto.names)
}
#if LANG_CXX11
inline void HistoryProto::add_names(::std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:keras.HistoryProto.names)
}
#endif
inline void HistoryProto::add_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:keras.HistoryProto.names)
}
inline void HistoryProto::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:keras.HistoryProto.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HistoryProto::names() const {
  // @@protoc_insertion_point(field_list:keras.HistoryProto.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HistoryProto::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:keras.HistoryProto.names)
  return &names_;
}

// repeated double values = 4;
inline int HistoryProto::values_size() const {
  return values_.size();
}
inline void HistoryProto::clear_values() {
  values_.Clear();
}
inline double HistoryProto::values(int index) const {
  // @@protoc_insertion_point(field_get:keras.HistoryProto.values)
  return values_.Get(index);
}
inline void HistoryProto::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:keras.HistoryProto.values)
}
inline void HistoryProto::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:keras.HistoryProto.values)
}
inline const ::google::protobuf::RepeatedField< double >&
HistoryProto::values() const {
  // @@protoc_insertion_point(field_list:keras.HistoryProto.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
HistoryProto::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:keras.HistoryProto.values)
  return &values_;
}

// uint64 nsamples = 5;
inline void HistoryProto::clear_nsamples() {
  nsamples_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HistoryProto::nsamples() const {
  // @@protoc_insertion_point(field_get:keras.HistoryProto.nsamples)
  return nsamples_;
}
inline void HistoryProto::set_nsamples(::google::protobuf::uint64 value) {
  
  nsamples_ = value;
  // @@protoc_insertion_point(field_set:keras.HistoryProto.nsamples)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace keras

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::keras::KerasCommand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::keras::KerasCommand>() {
  return ::keras::KerasCommand_descriptor();
}
template <> struct is_proto_enum< ::keras::TensorFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::keras::TensorFormat>() {
  return ::keras::TensorFormat_descriptor();
}
template <> struct is_proto_enum< ::keras::DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::keras::DataType>() {
  return ::keras::DataType_descriptor();
}
template <> struct is_proto_enum< ::keras::HistoryCallbackType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::keras::HistoryCallbackType>() {
  return ::keras::HistoryCallbackType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KerasProto_2eproto__INCLUDED
